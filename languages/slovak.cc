/* Generated by Snowball 2.0.0 - https://snowballstem.org/ */


#include <config.h>
#include <limits.h>
#include "slovak.h"

static const symbol s_pool[] = {
#define s_0_1 0
0xC3, 0xA1,
#define s_0_2 2
0xC3, 0xA4,
#define s_0_3 4
0xC3, 0xA9,
#define s_0_4 6
0xC3, 0xAD,
#define s_0_5 8
0xC3, 0xB3,
#define s_0_6 10
0xC3, 0xB4,
#define s_0_7 12
0xC3, 0xBA,
#define s_0_8 14
0xC3, 0xBD,
#define s_0_9 16
0xC4, 0x8D,
#define s_0_10 18
0xC4, 0x8F,
#define s_0_11 20
0xC4, 0x9B,
#define s_0_12 22
0xC4, 0xBA,
#define s_0_13 24
0xC4, 0xBE,
#define s_0_14 26
0xC5, 0x88,
#define s_0_15 28
0xC5, 0x95,
#define s_0_16 30
0xC5, 0x99,
#define s_0_17 32
0xC5, 0xA1,
#define s_0_18 34
0xC5, 0xA5,
#define s_0_19 36
0xC5, 0xAF,
#define s_0_20 38
0xC5, 0xBE,
#define s_1_1 40
0xC3, 0x81,
#define s_1_2 42
0xC3, 0x84,
#define s_1_3 44
0xC3, 0x89,
#define s_1_4 46
0xC3, 0x8D,
#define s_1_5 48
0xC3, 0x93,
#define s_1_6 50
0xC3, 0x94,
#define s_1_7 52
0xC3, 0x9A,
#define s_1_8 54
0xC3, 0x9D,
#define s_1_9 56
0xC4, 0x8C,
#define s_1_10 58
0xC4, 0x8E,
#define s_1_11 60
0xC4, 0x9A,
#define s_1_12 62
0xC4, 0xB9,
#define s_1_13 64
0xC4, 0xBD,
#define s_1_14 66
0xC4, 0xBE,
#define s_1_15 68
0xC5, 0x94,
#define s_1_16 70
0xC5, 0x98,
#define s_1_17 72
0xC5, 0xA0,
#define s_1_18 74
0xC5, 0xA4,
#define s_1_19 76
0xC5, 0xAE,
#define s_1_20 78
0xC5, 0xBD,
#define s_2_0 80
'b', 'a', 'b', 'i', 'c', 'k', 'a',
#define s_2_1 87
'b', 'a', 'b', 'i', 'e', 'k',
#define s_2_2 s_2_3
#define s_2_3 93
'b', 'o', 'l', 'a',
#define s_2_4 97
'b', 'o', 'l', 'o',
#define s_2_5 s_2_6
#define s_2_6 s_2_7
#define s_2_7 s_2_8
#define s_2_8 101
'b', 'u', 'd', 'e', 'm', 'e',
#define s_2_9 107
'b', 'u', 'd', 'e', 's',
#define s_2_10 112
'b', 'u', 'd', 'e', 't', 'e',
#define s_2_11 118
'b', 'u', 'd', 'm', 'e',
#define s_2_12 123
'b', 'u', 'd', 't', 'e',
#define s_2_13 128
'b', 'u', 'd', 'u',
#define s_2_14 s_2_15
#define s_2_15 132
'c', 'h', 'o', 'd', 't', 'e',
#define s_2_16 138
'd', 'l', 'a', 'n',
#define s_2_17 s_2_18
#define s_2_18 s_2_19
#define s_2_19 142
'i', 'd', 'e', 'm', 'e',
#define s_2_20 147
'i', 'd', 'e', 's',
#define s_2_21 151
'i', 'd', 'e', 't', 'e',
#define s_2_22 s_2_23
#define s_2_23 s_2_24
#define s_2_24 156
'i', 'd', 'u', 'c', 'a',
#define s_2_25 161
'i', 'd', 'u', 'c', 'e',
#define s_2_26 166
'i', 'd', 'u', 'c', 'i',
#define s_2_27 171
'i', 's', 'i', 'e', 'l',
#define s_2_28 176
'i', 's', 'l', 'a',
#define s_2_29 180
'i', 's', 'l', 'i',
#define s_2_30 184
'i', 's', 'l', 'o',
#define s_2_31 s_2_32
#define s_2_32 188
'j', 'e', 'd', 'i', 'a',
#define s_2_33 193
'j', 'e', 'd', 'l', 'a',
#define s_2_34 198
'j', 'e', 'd', 'l', 'i',
#define s_2_35 203
'j', 'e', 'd', 'l', 'o',
#define s_2_36 208
'j', 'e', 'd', 'o', 'l',
#define s_2_37 s_2_38
#define s_2_38 213
'j', 'e', 'd', 'z', 'm', 'e',
#define s_2_39 219
'j', 'e', 'd', 'z', 't', 'e',
#define s_2_40 s_2_41
#define s_2_41 225
'j', 'e', 'm', 'e',
#define s_2_42 229
'j', 'e', 's',
#define s_2_43 232
'j', 'e', 't', 'e',
#define s_2_44 s_2_45
#define s_2_45 s_2_46
#define s_2_46 236
'm', 'a', 'j', 'e', 't', 'o', 'k',
#define s_2_47 243
'm', 'a', 'j', 'm', 'e',
#define s_2_48 248
'm', 'a', 'j', 't', 'e',
#define s_2_49 253
'm', 'a', 'j', 'u',
#define s_2_50 s_2_51
#define s_2_51 257
'm', 'a', 'l', 'a',
#define s_2_52 261
'm', 'a', 'l', 'i',
#define s_2_53 265
'm', 'a', 'l', 'o',
#define s_2_54 s_2_55
#define s_2_55 269
'm', 'a', 'm', 'e',
#define s_2_56 273
'm', 'a', 'm', 'i', 'c', 'k', 'a',
#define s_2_57 280
'm', 'a', 'm', 'k', 'a',
#define s_2_58 285
'm', 'a', 's',
#define s_2_59 288
'm', 'a', 't', 'e',
#define s_2_60 292
'm', 'a', 't', 'i', 'c', 'k', 'a',
#define s_2_61 299
'm', 'a', 't', 'k', 'a',
#define s_2_62 304
'm', 'e', 's', 't', 'e',
#define s_2_63 309
'm', 'i', 'e', 's', 't',
#define s_2_64 s_2_65
#define s_2_65 314
'p', 'o', 'd', 'm', 'e',
#define s_2_66 319
'p', 'o', 'd', 't', 'e',
#define s_2_67 s_2_68
#define s_2_68 s_2_69
#define s_2_69 324
'p', 'o', 'j', 'd', 'e', 'm', 'e',
#define s_2_70 331
'p', 'o', 'j', 'd', 'e', 's',
#define s_2_71 337
'p', 'o', 'j', 'd', 'e', 't', 'e',
#define s_2_72 344
'p', 'o', 'j', 'd', 'u',
#define s_2_73 (s_2_27 + 1)
#define s_2_74 (s_2_27 + 1)
#define s_2_75 (s_2_28 + 1)
#define s_2_76 (s_2_29 + 1)
#define s_2_77 (s_2_30 + 1)
#define s_2_78 349
's', 'm', 'e',
#define s_2_79 352
's', 'o', 'm',
#define s_2_80 s_2_81
#define s_2_81 355
's', 'r', 'a', 'l', 'i',
#define s_2_82 (s_2_62 + 2)
#define s_2_83 360
's', 'u',
#define s_2_84 362
'z', 'i', 'e', 'n',
#define s_3_0 366
'b', 'e', 'z',
#define s_3_1 369
'c', 'e', 'z',
#define s_3_2 372
'd', 'o',
#define s_3_3 374
'n', 'a', 'd',
#define s_3_4 377
'n', 'a', 'j',
#define s_3_5 380
'n', 'e',
#define s_3_6 382
'o', 'b',
#define s_3_7 (s_3_9 + 1)
#define s_3_8 s_3_9
#define s_3_9 384
'p', 'o', 'd',
#define s_3_10 387
'p', 'r', 'e',
#define s_3_11 390
'p', 'r', 'i',
#define s_3_12 393
'p', 'r', 'o', 't', 'i',
#define s_3_13 398
'r', 'o', 'z',
#define s_3_14 401
'v', 'y',
#define s_3_15 403
'v', 'z',
#define s_3_16 405
'z', 'a',
#define s_4_0 (s_4_1 + 1)
#define s_4_1 (s_4_2 + 3)
#define s_4_2 407
'e', 'j', 's', 'i', 'a',
#define s_4_3 (s_4_4 + 2)
#define s_4_4 412
'i', 'n', 'o', 'v', 'i', 'a',
#define s_4_5 418
's', 'k', 'a',
#define s_4_6 (s_4_7 + 2)
#define s_4_7 421
'o', 'v', 'a', 'l', 'a',
#define s_4_8 426
'i', 'l', 'a',
#define s_4_9 s_4_59
#define s_4_10 s_4_43
#define s_4_11 (s_4_7 + 1)
#define s_4_12 429
'e', 'n', 'i', 'e', 'c',
#define s_4_13 434
'u', 'j', 'u', 'c',
#define s_4_14 s_4_2
#define s_4_15 438
'e', 'n', 'c', 'e',
#define s_4_16 (s_4_12 + 2)
#define s_4_17 (s_4_18 + 2)
#define s_4_18 s_4_101
#define s_4_19 s_4_25
#define s_4_20 (s_4_21 + 1)
#define s_4_21 (s_4_22 + 2)
#define s_4_22 442
'a', 'v', 'a', 'm', 'e',
#define s_4_23 (s_4_24 + 1)
#define s_4_24 447
'i', 'e', 'm', 'e',
#define s_4_25 451
'u', 'j', 'e', 'm', 'e',
#define s_4_26 456
'i', 'm', 'e',
#define s_4_27 (s_4_28 + 1)
#define s_4_28 459
'u', 'j', 'm', 'e',
#define s_4_29 s_4_72
#define s_4_30 (s_4_31 + 1)
#define s_4_31 (s_4_32 + 2)
#define s_4_32 463
'a', 'v', 'a', 't', 'e',
#define s_4_33 (s_4_34 + 1)
#define s_4_34 468
'i', 'e', 't', 'e',
#define s_4_35 472
'u', 'j', 'e', 't', 'e',
#define s_4_36 477
'i', 't', 'e',
#define s_4_37 (s_4_38 + 1)
#define s_4_38 480
'u', 'j', 't', 'e',
#define s_4_39 (s_4_40 + 1)
#define s_4_40 s_4_74
#define s_4_41 (s_4_42 + 1)
#define s_4_42 484
'i', 'a', 'c', 'h',
#define s_4_43 488
'a', 't', 'a', 'c', 'h',
#define s_4_44 (s_4_45 + 3)
#define s_4_45 493
'e', 'j', 's', 'i', 'c', 'h',
#define s_4_46 (s_4_47 + 3)
#define s_4_47 499
'e', 'n', 'c', 'o', 'c', 'h',
#define s_4_48 505
'i', 'n', 'o', 'c', 'h',
#define s_4_49 (s_4_50 + 2)
#define s_4_50 510
'i', 'n', 'y', 'c', 'h',
#define s_4_51 515
'o', 'v', 'y', 'c', 'h',
#define s_4_52 s_4_1
#define s_4_53 (s_4_54 + 2)
#define s_4_54 520
'o', 'v', 'a', 'l', 'i',
#define s_4_55 525
'i', 'l', 'i',
#define s_4_56 (s_4_57 + 1)
#define s_4_57 (s_4_58 + 3)
#define s_4_58 528
'e', 'n', 'c', 'a', 'm', 'i',
#define s_4_59 534
'i', 'n', 'a', 'm', 'i',
#define s_4_60 539
'a', 't', 'a', 'm', 'i',
#define s_4_61 (s_4_62 + 3)
#define s_4_62 544
'e', 'j', 's', 'i', 'm', 'i',
#define s_4_63 (s_4_64 + 2)
#define s_4_64 550
'i', 'n', 'y', 'm', 'i',
#define s_4_65 555
'o', 'v', 'y', 'm', 'i',
#define s_4_66 560
'i', 'n', 'i',
#define s_4_67 s_4_2
#define s_4_68 563
'a', 't', 'i',
#define s_4_69 s_4_3
#define s_4_70 s_4_4
#define s_4_71 s_4_2
#define s_4_72 566
'i', 'n', 'e', 'j',
#define s_4_73 570
'e', 'j', 's', 'e', 'j',
#define s_4_74 575
'o', 'v', 'e', 'j',
#define s_4_75 s_4_6
#define s_4_76 s_4_7
#define s_4_77 s_4_8
#define s_4_78 s_4_20
#define s_4_79 s_4_21
#define s_4_80 579
'i', 'a', 'm',
#define s_4_81 s_4_60
#define s_4_82 s_4_22
#define s_4_83 s_4_24
#define s_4_84 s_4_25
#define s_4_85 s_4_26
#define s_4_86 s_4_62
#define s_4_87 (s_4_88 + 3)
#define s_4_88 582
'e', 'n', 'c', 'o', 'm',
#define s_4_89 587
'i', 'n', 'o', 'm',
#define s_4_90 591
'e', 'j', 's', 'o', 'm',
#define s_4_91 596
'a', 't', 'o', 'm',
#define s_4_92 600
'o', 'v', 'o', 'm',
#define s_4_93 s_4_63
#define s_4_94 s_4_64
#define s_4_95 s_4_65
#define s_4_96 (s_4_4 + 1)
#define s_4_97 s_4_4
#define s_4_98 (s_4_99 + 1)
#define s_4_99 (s_4_100 + 1)
#define s_4_100 (s_4_101 + 3)
#define s_4_101 604
'e', 'j', 's', 'i', 'e', 'h', 'o',
#define s_4_102 611
'i', 'n', 'h', 'o',
#define s_4_103 615
'o', 'v', 'h', 'o',
#define s_4_104 (s_4_105 + 2)
#define s_4_105 619
'o', 'v', 'a', 'l', 'o',
#define s_4_106 624
'i', 'l', 'o',
#define s_4_107 s_4_4
#define s_4_108 (s_4_92 + 1)
#define s_4_109 s_4_92
#define s_4_110 (s_4_111 + 2)
#define s_4_111 627
'a', 'v', 'a', 's',
#define s_4_112 (s_4_113 + 1)
#define s_4_113 631
'i', 'e', 's',
#define s_4_114 634
'u', 'j', 'e', 's',
#define s_4_115 638
'i', 's',
#define s_4_116 s_4_10
#define s_4_117 s_4_36
#define s_4_118 (s_4_13 + 2)
#define s_4_119 (s_4_120 + 3)
#define s_4_120 640
'e', 'j', 's', 'i', 'u',
#define s_4_121 (s_4_122 + 2)
#define s_4_122 645
'a', 'v', 'a', 'j', 'u',
#define s_4_123 s_4_13
#define s_4_124 (s_4_125 + 1)
#define s_4_125 (s_4_126 + 1)
#define s_4_126 (s_4_127 + 3)
#define s_4_127 650
'e', 'j', 's', 'i', 'e', 'm', 'u',
#define s_4_128 657
'i', 'n', 'm', 'u',
#define s_4_129 661
'o', 'v', 'm', 'u',
#define s_4_130 665
'i', 'n', 'u',
#define s_4_131 (s_4_132 + 2)
#define s_4_132 668
'i', 'n', 'o', 'u',
#define s_4_133 672
'e', 'j', 's', 'o', 'u',
#define s_4_134 677
'o', 'v', 'o', 'u',
#define s_4_135 681
'a', 't', 'u',
#define s_4_136 (s_4_137 + 1)
#define s_4_137 684
'o', 'v', 'u',
#define s_4_138 (s_4_3 + 1)
#define s_4_139 s_4_3
#define s_4_140 s_4_4
#define s_4_141 s_4_49
#define s_4_142 s_4_51
};


static const struct among a_0[21] =
{
/*  0 */ { 0, 0, -1, 15},
/*  1 */ { 2, s_0_1, 0, 1},
/*  2 */ { 2, s_0_2, 0, 1},
/*  3 */ { 2, s_0_3, 0, 4},
/*  4 */ { 2, s_0_4, 0, 5},
/*  5 */ { 2, s_0_5, 0, 8},
/*  6 */ { 2, s_0_6, 0, 8},
/*  7 */ { 2, s_0_7, 0, 12},
/*  8 */ { 2, s_0_8, 0, 13},
/*  9 */ { 2, s_0_9, 0, 2},
/* 10 */ { 2, s_0_10, 0, 3},
/* 11 */ { 2, s_0_11, 0, 4},
/* 12 */ { 2, s_0_12, 0, 6},
/* 13 */ { 2, s_0_13, 0, 6},
/* 14 */ { 2, s_0_14, 0, 7},
/* 15 */ { 2, s_0_15, 0, 9},
/* 16 */ { 2, s_0_16, 0, 9},
/* 17 */ { 2, s_0_17, 0, 10},
/* 18 */ { 2, s_0_18, 0, 11},
/* 19 */ { 2, s_0_19, 0, 12},
/* 20 */ { 2, s_0_20, 0, 14}
};


static const struct among a_1[21] =
{
/*  0 */ { 0, 0, -1, 21},
/*  1 */ { 2, s_1_1, 0, 1},
/*  2 */ { 2, s_1_2, 0, 2},
/*  3 */ { 2, s_1_3, 0, 5},
/*  4 */ { 2, s_1_4, 0, 7},
/*  5 */ { 2, s_1_5, 0, 12},
/*  6 */ { 2, s_1_6, 0, 11},
/*  7 */ { 2, s_1_7, 0, 17},
/*  8 */ { 2, s_1_8, 0, 19},
/*  9 */ { 2, s_1_9, 0, 3},
/* 10 */ { 2, s_1_10, 0, 4},
/* 11 */ { 2, s_1_11, 0, 6},
/* 12 */ { 2, s_1_12, 0, 8},
/* 13 */ { 2, s_1_13, 0, 10},
/* 14 */ { 2, s_1_14, 0, 9},
/* 15 */ { 2, s_1_15, 0, 13},
/* 16 */ { 2, s_1_16, 0, 14},
/* 17 */ { 2, s_1_17, 0, 15},
/* 18 */ { 2, s_1_18, 0, 16},
/* 19 */ { 2, s_1_19, 0, 18},
/* 20 */ { 2, s_1_20, 0, 20}
};


static const struct among a_2[85] =
{
/*  0 */ { 7, s_2_0, -1, 5},
/*  1 */ { 6, s_2_1, -1, 5},
/*  2 */ { 3, s_2_2, -1, 1},
/*  3 */ { 4, s_2_3, 2, 1},
/*  4 */ { 4, s_2_4, 2, 1},
/*  5 */ { 3, s_2_5, -1, 1},
/*  6 */ { 4, s_2_6, 5, 1},
/*  7 */ { 5, s_2_7, 6, 1},
/*  8 */ { 6, s_2_8, 7, 1},
/*  9 */ { 5, s_2_9, 6, 1},
/* 10 */ { 6, s_2_10, 6, 1},
/* 11 */ { 5, s_2_11, 5, 1},
/* 12 */ { 5, s_2_12, 5, 1},
/* 13 */ { 4, s_2_13, 5, 1},
/* 14 */ { 4, s_2_14, -1, 3},
/* 15 */ { 6, s_2_15, 14, 3},
/* 16 */ { 4, s_2_16, -1, 6},
/* 17 */ { 3, s_2_17, -1, 3},
/* 18 */ { 4, s_2_18, 17, 3},
/* 19 */ { 5, s_2_19, 18, 3},
/* 20 */ { 4, s_2_20, 17, 3},
/* 21 */ { 5, s_2_21, 17, 3},
/* 22 */ { 3, s_2_22, -1, 3},
/* 23 */ { 4, s_2_23, 22, 3},
/* 24 */ { 5, s_2_24, 23, 3},
/* 25 */ { 5, s_2_25, 23, 3},
/* 26 */ { 5, s_2_26, 23, 3},
/* 27 */ { 5, s_2_27, -1, 3},
/* 28 */ { 4, s_2_28, -1, 3},
/* 29 */ { 4, s_2_29, -1, 3},
/* 30 */ { 4, s_2_30, -1, 3},
/* 31 */ { 2, s_2_31, -1, 1},
/* 32 */ { 5, s_2_32, 31, 4},
/* 33 */ { 5, s_2_33, 31, 4},
/* 34 */ { 5, s_2_34, 31, 4},
/* 35 */ { 5, s_2_35, 31, 4},
/* 36 */ { 5, s_2_36, 31, 4},
/* 37 */ { 4, s_2_37, 31, 4},
/* 38 */ { 6, s_2_38, 37, 4},
/* 39 */ { 6, s_2_39, 37, 4},
/* 40 */ { 3, s_2_40, 31, 4},
/* 41 */ { 4, s_2_41, 40, 4},
/* 42 */ { 3, s_2_42, 31, 4},
/* 43 */ { 4, s_2_43, 31, 4},
/* 44 */ { 2, s_2_44, -1, 2},
/* 45 */ { 3, s_2_45, 44, 2},
/* 46 */ { 7, s_2_46, 45, 8},
/* 47 */ { 5, s_2_47, 45, 2},
/* 48 */ { 5, s_2_48, 45, 2},
/* 49 */ { 4, s_2_49, 45, 2},
/* 50 */ { 3, s_2_50, 44, 2},
/* 51 */ { 4, s_2_51, 50, 2},
/* 52 */ { 4, s_2_52, 50, 2},
/* 53 */ { 4, s_2_53, 50, 2},
/* 54 */ { 3, s_2_54, 44, 2},
/* 55 */ { 4, s_2_55, 54, 2},
/* 56 */ { 7, s_2_56, 54, 7},
/* 57 */ { 5, s_2_57, 54, 7},
/* 58 */ { 3, s_2_58, 44, 2},
/* 59 */ { 4, s_2_59, 44, 2},
/* 60 */ { 7, s_2_60, 44, 7},
/* 61 */ { 5, s_2_61, 44, 7},
/* 62 */ { 5, s_2_62, -1, 9},
/* 63 */ { 5, s_2_63, -1, 9},
/* 64 */ { 3, s_2_64, -1, 3},
/* 65 */ { 5, s_2_65, 64, 3},
/* 66 */ { 5, s_2_66, 64, 3},
/* 67 */ { 5, s_2_67, -1, 3},
/* 68 */ { 6, s_2_68, 67, 3},
/* 69 */ { 7, s_2_69, 68, 3},
/* 70 */ { 6, s_2_70, 67, 3},
/* 71 */ { 7, s_2_71, 67, 3},
/* 72 */ { 5, s_2_72, -1, 3},
/* 73 */ { 2, s_2_73, -1, 1},
/* 74 */ { 4, s_2_74, 73, 3},
/* 75 */ { 3, s_2_75, -1, 3},
/* 76 */ { 3, s_2_76, -1, 3},
/* 77 */ { 3, s_2_77, -1, 3},
/* 78 */ { 3, s_2_78, -1, 1},
/* 79 */ { 3, s_2_79, -1, 1},
/* 80 */ { 4, s_2_80, -1, 10},
/* 81 */ { 5, s_2_81, 80, 10},
/* 82 */ { 3, s_2_82, -1, 1},
/* 83 */ { 2, s_2_83, -1, 1},
/* 84 */ { 4, s_2_84, -1, 11}
};


static const struct among a_3[17] =
{
/*  0 */ { 3, s_3_0, -1, 2},
/*  1 */ { 3, s_3_1, -1, 2},
/*  2 */ { 2, s_3_2, -1, 3},
/*  3 */ { 3, s_3_3, -1, 2},
/*  4 */ { 3, s_3_4, -1, 2},
/*  5 */ { 2, s_3_5, -1, 3},
/*  6 */ { 2, s_3_6, -1, 3},
/*  7 */ { 2, s_3_7, -1, 3},
/*  8 */ { 2, s_3_8, -1, 3},
/*  9 */ { 3, s_3_9, 8, 2},
/* 10 */ { 3, s_3_10, -1, 2},
/* 11 */ { 3, s_3_11, -1, 2},
/* 12 */ { 5, s_3_12, -1, 1},
/* 13 */ { 3, s_3_13, -1, 2},
/* 14 */ { 2, s_3_14, -1, 3},
/* 15 */ { 2, s_3_15, -1, 3},
/* 16 */ { 2, s_3_16, -1, 3}
};


static const struct among a_4[143] =
{
/*  0 */ { 1, s_4_0, -1, 1},
/*  1 */ { 2, s_4_1, 0, 1},
/*  2 */ { 5, s_4_2, 1, 1},
/*  3 */ { 4, s_4_3, 1, 1},
/*  4 */ { 6, s_4_4, 3, 1},
/*  5 */ { 3, s_4_5, 0, 1},
/*  6 */ { 3, s_4_6, 0, 1},
/*  7 */ { 5, s_4_7, 6, 1},
/*  8 */ { 3, s_4_8, 0, 1},
/*  9 */ { 3, s_4_9, 0, 1},
/* 10 */ { 3, s_4_10, 0, 1},
/* 11 */ { 2, s_4_11, 0, 1},
/* 12 */ { 5, s_4_12, -1, 1},
/* 13 */ { 4, s_4_13, -1, 1},
/* 14 */ { 1, s_4_14, -1, 1},
/* 15 */ { 4, s_4_15, 14, 1},
/* 16 */ { 2, s_4_16, 14, 1},
/* 17 */ { 3, s_4_17, 16, 1},
/* 18 */ { 5, s_4_18, 17, 1},
/* 19 */ { 3, s_4_19, 14, 1},
/* 20 */ { 2, s_4_20, 14, 1},
/* 21 */ { 3, s_4_21, 20, 1},
/* 22 */ { 5, s_4_22, 21, 1},
/* 23 */ { 3, s_4_23, 20, 1},
/* 24 */ { 4, s_4_24, 23, 1},
/* 25 */ { 5, s_4_25, 23, 1},
/* 26 */ { 3, s_4_26, 20, 1},
/* 27 */ { 3, s_4_27, 20, 1},
/* 28 */ { 4, s_4_28, 27, 1},
/* 29 */ { 3, s_4_29, 14, 1},
/* 30 */ { 2, s_4_30, 14, 1},
/* 31 */ { 3, s_4_31, 30, 1},
/* 32 */ { 5, s_4_32, 31, 1},
/* 33 */ { 3, s_4_33, 30, 1},
/* 34 */ { 4, s_4_34, 33, 1},
/* 35 */ { 5, s_4_35, 33, 1},
/* 36 */ { 3, s_4_36, 30, 1},
/* 37 */ { 3, s_4_37, 30, 1},
/* 38 */ { 4, s_4_38, 37, 1},
/* 39 */ { 2, s_4_39, 14, 1},
/* 40 */ { 3, s_4_40, 39, 1},
/* 41 */ { 3, s_4_41, -1, 1},
/* 42 */ { 4, s_4_42, 41, 1},
/* 43 */ { 5, s_4_43, 41, 1},
/* 44 */ { 3, s_4_44, -1, 1},
/* 45 */ { 6, s_4_45, 44, 1},
/* 46 */ { 3, s_4_46, -1, 1},
/* 47 */ { 6, s_4_47, 46, 1},
/* 48 */ { 5, s_4_48, 46, 1},
/* 49 */ { 3, s_4_49, -1, 1},
/* 50 */ { 5, s_4_50, 49, 1},
/* 51 */ { 5, s_4_51, 49, 1},
/* 52 */ { 1, s_4_52, -1, 1},
/* 53 */ { 3, s_4_53, 52, 1},
/* 54 */ { 5, s_4_54, 53, 1},
/* 55 */ { 3, s_4_55, 52, 1},
/* 56 */ { 2, s_4_56, 52, 1},
/* 57 */ { 3, s_4_57, 56, 1},
/* 58 */ { 6, s_4_58, 57, 1},
/* 59 */ { 5, s_4_59, 57, 1},
/* 60 */ { 5, s_4_60, 57, 1},
/* 61 */ { 3, s_4_61, 56, 1},
/* 62 */ { 6, s_4_62, 61, 1},
/* 63 */ { 3, s_4_63, 56, 1},
/* 64 */ { 5, s_4_64, 63, 1},
/* 65 */ { 5, s_4_65, 63, 1},
/* 66 */ { 3, s_4_66, 52, 1},
/* 67 */ { 4, s_4_67, 52, 1},
/* 68 */ { 3, s_4_68, 52, 1},
/* 69 */ { 3, s_4_69, 52, 1},
/* 70 */ { 5, s_4_70, 69, 1},
/* 71 */ { 2, s_4_71, -1, 1},
/* 72 */ { 4, s_4_72, 71, 1},
/* 73 */ { 5, s_4_73, 71, 1},
/* 74 */ { 4, s_4_74, 71, 1},
/* 75 */ { 2, s_4_75, -1, 1},
/* 76 */ { 4, s_4_76, 75, 1},
/* 77 */ { 2, s_4_77, -1, 1},
/* 78 */ { 1, s_4_78, -1, 1},
/* 79 */ { 2, s_4_79, 78, 1},
/* 80 */ { 3, s_4_80, 79, 1},
/* 81 */ { 4, s_4_81, 79, 1},
/* 82 */ { 4, s_4_82, 79, 1},
/* 83 */ { 3, s_4_83, 78, 1},
/* 84 */ { 4, s_4_84, 78, 1},
/* 85 */ { 2, s_4_85, 78, 1},
/* 86 */ { 5, s_4_86, 85, 1},
/* 87 */ { 2, s_4_87, 78, 1},
/* 88 */ { 5, s_4_88, 87, 1},
/* 89 */ { 4, s_4_89, 87, 1},
/* 90 */ { 5, s_4_90, 87, 1},
/* 91 */ { 4, s_4_91, 87, 1},
/* 92 */ { 4, s_4_92, 87, 1},
/* 93 */ { 2, s_4_93, 78, 1},
/* 94 */ { 4, s_4_94, 93, 1},
/* 95 */ { 4, s_4_95, 93, 1},
/* 96 */ { 1, s_4_96, -1, 1},
/* 97 */ { 2, s_4_97, 96, 1},
/* 98 */ { 2, s_4_98, -1, 1},
/* 99 */ { 3, s_4_99, 98, 1},
/*100 */ { 4, s_4_100, 99, 1},
/*101 */ { 7, s_4_101, 100, 1},
/*102 */ { 4, s_4_102, 98, 1},
/*103 */ { 4, s_4_103, 98, 1},
/*104 */ { 3, s_4_104, -1, 1},
/*105 */ { 5, s_4_105, 104, 1},
/*106 */ { 3, s_4_106, -1, 1},
/*107 */ { 3, s_4_107, -1, 1},
/*108 */ { 2, s_4_108, -1, 1},
/*109 */ { 3, s_4_109, 108, 1},
/*110 */ { 2, s_4_110, -1, 1},
/*111 */ { 4, s_4_111, 110, 1},
/*112 */ { 2, s_4_112, -1, 1},
/*113 */ { 3, s_4_113, 112, 1},
/*114 */ { 4, s_4_114, 112, 1},
/*115 */ { 2, s_4_115, -1, 1},
/*116 */ { 2, s_4_116, -1, 1},
/*117 */ { 2, s_4_117, -1, 1},
/*118 */ { 1, s_4_118, -1, 1},
/*119 */ { 2, s_4_119, 118, 1},
/*120 */ { 5, s_4_120, 119, 1},
/*121 */ { 3, s_4_121, 118, 1},
/*122 */ { 5, s_4_122, 121, 1},
/*123 */ { 3, s_4_123, 118, 1},
/*124 */ { 2, s_4_124, 118, 1},
/*125 */ { 3, s_4_125, 124, 1},
/*126 */ { 4, s_4_126, 125, 1},
/*127 */ { 7, s_4_127, 126, 1},
/*128 */ { 4, s_4_128, 124, 1},
/*129 */ { 4, s_4_129, 124, 1},
/*130 */ { 3, s_4_130, 118, 1},
/*131 */ { 2, s_4_131, 118, 1},
/*132 */ { 4, s_4_132, 131, 1},
/*133 */ { 5, s_4_133, 131, 1},
/*134 */ { 4, s_4_134, 131, 1},
/*135 */ { 3, s_4_135, 118, 1},
/*136 */ { 2, s_4_136, 118, 1},
/*137 */ { 3, s_4_137, 136, 1},
/*138 */ { 1, s_4_138, -1, 1},
/*139 */ { 2, s_4_139, 138, 1},
/*140 */ { 4, s_4_140, 139, 1},
/*141 */ { 1, s_4_141, -1, 1},
/*142 */ { 3, s_4_142, 141, 1}
};

static const unsigned char g_vowel[] = { 17, 65, 16, 1 };

static const symbol s_0[] = { 'a' };
static const symbol s_1[] = { 'c' };
static const symbol s_2[] = { 'd' };
static const symbol s_3[] = { 'e' };
static const symbol s_4[] = { 'i' };
static const symbol s_5[] = { 'l' };
static const symbol s_6[] = { 'n' };
static const symbol s_7[] = { 'o' };
static const symbol s_8[] = { 'r' };
static const symbol s_9[] = { 's' };
static const symbol s_10[] = { 't' };
static const symbol s_11[] = { 'u' };
static const symbol s_12[] = { 'y' };
static const symbol s_13[] = { 'z' };
static const symbol s_14[] = { 0xC3, 0xA1 };
static const symbol s_15[] = { 0xC3, 0xA4 };
static const symbol s_16[] = { 0xC4, 0x8D };
static const symbol s_17[] = { 0xC4, 0x8F };
static const symbol s_18[] = { 0xC3, 0xA9 };
static const symbol s_19[] = { 0xC4, 0x9B };
static const symbol s_20[] = { 0xC3, 0xAD };
static const symbol s_21[] = { 0xC4, 0xBA };
static const symbol s_22[] = { 0xC4, 0xBE };
static const symbol s_23[] = { 0xC5, 0x88 };
static const symbol s_24[] = { 0xC3, 0xB4 };
static const symbol s_25[] = { 0xC3, 0xB3 };
static const symbol s_26[] = { 0xC5, 0x95 };
static const symbol s_27[] = { 0xC5, 0x99 };
static const symbol s_28[] = { 0xC5, 0xA1 };
static const symbol s_29[] = { 0xC5, 0xA5 };
static const symbol s_30[] = { 0xC3, 0xBA };
static const symbol s_31[] = { 0xC5, 0xAF };
static const symbol s_32[] = { 0xC3, 0xBD };
static const symbol s_33[] = { 0xC5, 0xBE };
static const symbol s_34[] = { 'b', 'y', 't' };
static const symbol s_35[] = { 'm', 'a', 't' };
static const symbol s_36[] = { 'i', 's', 't' };
static const symbol s_37[] = { 'j', 'e', 's', 't' };
static const symbol s_38[] = { 'b', 'a', 'b', 'k' };
static const symbol s_39[] = { 'd', 'l', 'a', 'n' };
static const symbol s_40[] = { 'm', 'a', 'm' };
static const symbol s_41[] = { 'm', 'a', 'j', 'e', 't', 'k' };
static const symbol s_42[] = { 'm', 'e', 's', 't' };
static const symbol s_43[] = { 's', 'e', 'r' };
static const symbol s_44[] = { 'z', 'e', 'n' };

int Xapian::InternalStemSlovak::r_un_accent() {
    int among_var;
    while(1) {
        int c1 = c;
        bra = c;
        among_var = find_among(s_pool, a_0, 21, 0, 0);
        if (!(among_var)) goto lab0;
        ket = c;
        switch (among_var) {
            case 1:
                {   int ret = slice_from_s(1, s_0);
                    if (ret < 0) return ret;
                }
                break;
            case 2:
                {   int ret = slice_from_s(1, s_1);
                    if (ret < 0) return ret;
                }
                break;
            case 3:
                {   int ret = slice_from_s(1, s_2);
                    if (ret < 0) return ret;
                }
                break;
            case 4:
                {   int ret = slice_from_s(1, s_3);
                    if (ret < 0) return ret;
                }
                break;
            case 5:
                {   int ret = slice_from_s(1, s_4);
                    if (ret < 0) return ret;
                }
                break;
            case 6:
                {   int ret = slice_from_s(1, s_5);
                    if (ret < 0) return ret;
                }
                break;
            case 7:
                {   int ret = slice_from_s(1, s_6);
                    if (ret < 0) return ret;
                }
                break;
            case 8:
                {   int ret = slice_from_s(1, s_7);
                    if (ret < 0) return ret;
                }
                break;
            case 9:
                {   int ret = slice_from_s(1, s_8);
                    if (ret < 0) return ret;
                }
                break;
            case 10:
                {   int ret = slice_from_s(1, s_9);
                    if (ret < 0) return ret;
                }
                break;
            case 11:
                {   int ret = slice_from_s(1, s_10);
                    if (ret < 0) return ret;
                }
                break;
            case 12:
                {   int ret = slice_from_s(1, s_11);
                    if (ret < 0) return ret;
                }
                break;
            case 13:
                {   int ret = slice_from_s(1, s_12);
                    if (ret < 0) return ret;
                }
                break;
            case 14:
                {   int ret = slice_from_s(1, s_13);
                    if (ret < 0) return ret;
                }
                break;
            case 15:
                {   int ret = skip_utf8(p, c, 0, l, 1);
                    if (ret < 0) goto lab0;
                    c = ret;
                }
                break;
        }
        continue;
    lab0:
        c = c1;
        break;
    }
    return 1;
}

int Xapian::InternalStemSlovak::r_lower_case() {
    int among_var;
    while(1) {
        int c1 = c;
        bra = c;
        among_var = find_among(s_pool, a_1, 21, 0, 0);
        if (!(among_var)) goto lab0;
        ket = c;
        switch (among_var) {
            case 1:
                {   int ret = slice_from_s(2, s_14);
                    if (ret < 0) return ret;
                }
                break;
            case 2:
                {   int ret = slice_from_s(2, s_15);
                    if (ret < 0) return ret;
                }
                break;
            case 3:
                {   int ret = slice_from_s(2, s_16);
                    if (ret < 0) return ret;
                }
                break;
            case 4:
                {   int ret = slice_from_s(2, s_17);
                    if (ret < 0) return ret;
                }
                break;
            case 5:
                {   int ret = slice_from_s(2, s_18);
                    if (ret < 0) return ret;
                }
                break;
            case 6:
                {   int ret = slice_from_s(2, s_19);
                    if (ret < 0) return ret;
                }
                break;
            case 7:
                {   int ret = slice_from_s(2, s_20);
                    if (ret < 0) return ret;
                }
                break;
            case 8:
                {   int ret = slice_from_s(2, s_21);
                    if (ret < 0) return ret;
                }
                break;
            case 9:
                {   int ret = slice_from_s(2, s_22);
                    if (ret < 0) return ret;
                }
                break;
            case 10:
                {   int ret = slice_from_s(2, s_23);
                    if (ret < 0) return ret;
                }
                break;
            case 11:
                {   int ret = slice_from_s(2, s_24);
                    if (ret < 0) return ret;
                }
                break;
            case 12:
                {   int ret = slice_from_s(2, s_25);
                    if (ret < 0) return ret;
                }
                break;
            case 13:
                {   int ret = slice_from_s(2, s_26);
                    if (ret < 0) return ret;
                }
                break;
            case 14:
                {   int ret = slice_from_s(2, s_27);
                    if (ret < 0) return ret;
                }
                break;
            case 15:
                {   int ret = slice_from_s(2, s_28);
                    if (ret < 0) return ret;
                }
                break;
            case 16:
                {   int ret = slice_from_s(2, s_29);
                    if (ret < 0) return ret;
                }
                break;
            case 17:
                {   int ret = slice_from_s(2, s_30);
                    if (ret < 0) return ret;
                }
                break;
            case 18:
                {   int ret = slice_from_s(2, s_31);
                    if (ret < 0) return ret;
                }
                break;
            case 19:
                {   int ret = slice_from_s(2, s_32);
                    if (ret < 0) return ret;
                }
                break;
            case 20:
                {   int ret = slice_from_s(2, s_33);
                    if (ret < 0) return ret;
                }
                break;
            case 21:
                {   int ret = skip_utf8(p, c, 0, l, 1);
                    if (ret < 0) goto lab0;
                    c = ret;
                }
                break;
        }
        continue;
    lab0:
        c = c1;
        break;
    }
    return 1;
}

int Xapian::InternalStemSlovak::r_exception() {
    int among_var;
    bra = c;
    if (c + 1 >= l || p[c + 1] >> 5 != 3 || !((3978034 >> (p[c + 1] & 0x1f)) & 1)) return 0;
    among_var = find_among(s_pool, a_2, 85, 0, 0);
    if (!(among_var)) return 0;
    ket = c;
    if (c < l) return 0;
    switch (among_var) {
        case 1:
            {   int ret = slice_from_s(3, s_34);
                if (ret < 0) return ret;
            }
            break;
        case 2:
            {   int ret = slice_from_s(3, s_35);
                if (ret < 0) return ret;
            }
            break;
        case 3:
            {   int ret = slice_from_s(3, s_36);
                if (ret < 0) return ret;
            }
            break;
        case 4:
            {   int ret = slice_from_s(4, s_37);
                if (ret < 0) return ret;
            }
            break;
        case 5:
            {   int ret = slice_from_s(4, s_38);
                if (ret < 0) return ret;
            }
            break;
        case 6:
            {   int ret = slice_from_s(4, s_39);
                if (ret < 0) return ret;
            }
            break;
        case 7:
            {   int ret = slice_from_s(3, s_40);
                if (ret < 0) return ret;
            }
            break;
        case 8:
            {   int ret = slice_from_s(6, s_41);
                if (ret < 0) return ret;
            }
            break;
        case 9:
            {   int ret = slice_from_s(4, s_42);
                if (ret < 0) return ret;
            }
            break;
        case 10:
            {   int ret = slice_from_s(3, s_43);
                if (ret < 0) return ret;
            }
            break;
        case 11:
            {   int ret = slice_from_s(3, s_44);
                if (ret < 0) return ret;
            }
            break;
    }
    return 1;
}

int Xapian::InternalStemSlovak::r_mark_p1() {
    I_p1 = l;
    {   
        int ret = out_grouping_U(g_vowel, 97, 121, 1);
        if (ret < 0) return 0;
        c += ret;
    }
    {   
        int ret = in_grouping_U(g_vowel, 97, 121, 1);
        if (ret < 0) return 0;
        c += ret;
    }
    I_p1 = c;
    return 1;
}

int Xapian::InternalStemSlovak::r_prefixes() {
    int among_var;
    {   int c1 = c;
        bra = c;
        if (c + 1 >= l || p[c + 1] >> 5 != 3 || !((100958262 >> (p[c + 1] & 0x1f)) & 1)) goto lab0;
        among_var = find_among(s_pool, a_3, 17, 0, 0);
        if (!(among_var)) goto lab0;
        ket = c;
        switch (among_var) {
            case 1:
                if (!(I_p1 > 4)) goto lab0;
                {   int ret = slice_del();
                    if (ret < 0) return ret;
                }
                break;
            case 2:
                if (!(I_p1 > 2)) goto lab0;
                {   int ret = slice_del();
                    if (ret < 0) return ret;
                }
                break;
            case 3:
                if (!(I_p1 > 1)) goto lab0;
                {   int ret = slice_del();
                    if (ret < 0) return ret;
                }
                break;
        }
    lab0:
        c = c1;
    }
    return 1;
}

int Xapian::InternalStemSlovak::r_R2() {
    if (!(I_p2 <= c)) return 0;
    return 1;
}

int Xapian::InternalStemSlovak::r_mark_p2() {
    I_p2 = lb;
    return 1;
}

int Xapian::InternalStemSlovak::r_suffixes() {
    
    {   int ret = r_mark_p2();
        if (ret < 0) return ret;
    }
    {   int m1 = l - c; (void)m1;
        ket = c;
        if (c <= lb || p[c - 1] >> 5 != 3 || !((41482026 >> (p[c - 1] & 0x1f)) & 1)) goto lab0;
        if (!(find_among_b(s_pool, a_4, 143, 0, 0))) goto lab0;
        bra = c;
        {   int ret = r_R2();
            if (ret == 0) goto lab0;
            if (ret < 0) return ret;
        }
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
    lab0:
        c = l - m1;
    }
    return 1;
}

int Xapian::InternalStemSlovak::r_end_vowel() {
    ket = c;
    if (in_grouping_b_U(g_vowel, 97, 121, 0)) return 0;
    bra = c;
    {   int ret = slice_del();
        if (ret < 0) return ret;
    }
    return 1;
}

int Xapian::InternalStemSlovak::stem() {
    {   int c1 = c;
        {   int ret = r_lower_case();
            if (ret < 0) return ret;
        }
        c = c1;
    }
    {   int c2 = c;
        {   int ret = r_un_accent();
            if (ret < 0) return ret;
        }
        c = c2;
    }
    {   int c3 = c;
        {   int ret = r_mark_p1();
            if (ret < 0) return ret;
        }
        c = c3;
    }
    
    {   int ret = r_prefixes();
        if (ret < 0) return ret;
    }
    {   int c4 = c;
        {   int ret = r_exception();
            if (ret == 0) goto lab1;
            if (ret < 0) return ret;
        }
        goto lab0;
    lab1:
        c = c4;
        lb = c; c = l;

        
        {   int ret = r_suffixes();
            if (ret < 0) return ret;
        }
        {   int m5 = l - c; (void)m5;
            {   int ret = r_end_vowel();
                if (ret < 0) return ret;
            }
            c = l - m5;
        }
        c = lb;
    }
lab0:
    return 1;
}

Xapian::InternalStemSlovak::InternalStemSlovak()
    : I_p2(0), I_p1(0)
{
}

Xapian::InternalStemSlovak::~InternalStemSlovak()
{
}

std::string
Xapian::InternalStemSlovak::get_description() const
{
    return "slovak";
}

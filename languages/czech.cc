/* Generated by Snowball 2.0.0 - https://snowballstem.org/ */


#include <config.h>
#include <limits.h>
#include "czech.h"

static const symbol s_pool[] = {
#define s_0_0 0
'c', 'e',
#define s_0_1 2
'z', 'e',
#define s_0_2 4
0xC5, 0xBE, 'e',
#define s_0_3 7
'c', 'i',
#define s_0_4 9
0xC4, 0x8D, 't', 'i',
#define s_0_5 13
0xC5, 0xA1, 't', 'i',
#define s_0_6 17
'z', 'i',
#define s_0_7 19
0xC4, 0x8D, 'i',
#define s_0_8 22
0xC5, 0xBE, 'i',
#define s_0_9 s_0_4
#define s_0_10 25
0xC4, 0x8D, 't', 0xC4, 0x9B,
#define s_0_11 30
0xC5, 0xA1, 't', 0xC4, 0x9B,
#define s_0_12 35
0xC4, 0x8D, 't', 0xC3, 0xA9,
#define s_0_13 40
0xC5, 0xA1, 't', 0xC3, 0xA9,
#define s_1_0 45
'i', 'n',
#define s_1_1 47
'o', 'v',
#define s_1_2 49
0xC5, 0xAF, 'v',
#define s_2_0 (s_2_1 + 2)
#define s_2_1 52
'a', 'm', 'a',
#define s_2_2 55
'a', 't', 'a',
#define s_2_3 (s_2_4 + 3)
#define s_2_4 s_2_21
#define s_2_5 (s_2_6 + 2)
#define s_2_6 58
'a', 't', 'e', 'c', 'h',
#define s_2_7 63
'i', 'c', 'h',
#define s_2_8 66
0xC3, 0xA1, 'c', 'h',
#define s_2_9 70
0xC3, 0xAD, 'c', 'h',
#define s_2_10 74
0xC3, 0xBD, 'c', 'h',
#define s_2_11 s_2_7
#define s_2_12 (s_2_13 + 1)
#define s_2_13 78
'a', 'm', 'i',
#define s_2_14 81
'e', 'm', 'i',
#define s_2_15 84
0xC4, 0x9B, 'm', 'i',
#define s_2_16 88
0xC3, 0xAD, 'm', 'i',
#define s_2_17 92
0xC3, 0xBD, 'm', 'i',
#define s_2_18 96
0xC4, 0x9B, 't', 'i',
#define s_2_19 100
'o', 'v', 'i',
#define s_2_20 s_2_14
#define s_2_21 103
0xC4, 0x9B, 't', 'e', 'm',
#define s_2_22 108
0xC3, 0xA1, 'm',
#define s_2_23 s_2_37
#define s_2_24 s_2_16
#define s_2_25 111
'a', 't', 0xC5, 0xAF, 'm',
#define s_2_26 s_2_17
#define s_2_27 s_2_19
#define s_2_28 116
'i', 'h', 'o',
#define s_2_29 119
0xC3, 0xA9, 'h', 'o',
#define s_2_30 123
0xC3, 0xAD, 'h', 'o',
#define s_2_31 127
'e', 's',
#define s_2_32 129
'o', 's',
#define s_2_33 131
'u', 's',
#define s_2_34 s_2_2
#define s_2_35 s_2_33
#define s_2_36 133
'i', 'm', 'u',
#define s_2_37 136
0xC3, 0xA9, 'm', 'u',
#define s_2_38 140
'o', 'u',
#define s_2_39 (s_2_40 + 2)
#define s_2_40 142
'a', 't', 'y',
#define s_2_41 s_2_4
#define s_2_42 s_2_8
#define s_2_43 s_2_23
#define s_2_44 145
'o', 'v', 0xC3, 0xA9,
#define s_2_45 s_2_9
#define s_2_46 (s_2_25 + 2)
#define s_2_47 s_2_10
#define s_3_0 s_3_4
#define s_3_1 149
'i', 't', 'b',
#define s_3_2 (s_3_3 + 2)
#define s_3_3 (s_3_4 + 2)
#define s_3_4 152
'o', 'b', 'i', 'n', 'e', 'c',
#define s_3_5 158
'o', 'v', 'e', 'c',
#define s_3_6 (s_3_7 + 2)
#define s_3_7 162
'e', 'n', 'i', 'c',
#define s_3_8 166
'o', 'c', 'h',
#define s_3_9 169
0xC3, 0xA1, 's', 'e', 'k',
#define s_3_10 174
'n', 'k',
#define s_3_11 (s_3_12 + 2)
#define s_3_12 176
'o', 'v', 'i', 's', 'k',
#define s_3_13 181
't', 'k',
#define s_3_14 183
'v', 'k',
#define s_3_15 185
0xC4, 0x8D, 'k',
#define s_3_16 188
'i', 0xC5, 0xA1, 'k',
#define s_3_17 192
'u', 0xC5, 0xA1, 'k',
#define s_3_18 (s_3_19 + 2)
#define s_3_19 196
'o', 'v', 'n', 0xC3, 0xAD, 'k',
#define s_3_20 202
'o', 'v', 0xC3, 0xAD, 'k',
#define s_3_21 207
'd', 'l',
#define s_3_22 209
'i', 't', 'e', 'l',
#define s_3_23 213
'u', 'l',
#define s_3_24 (s_3_25 + 2)
#define s_3_25 215
0xC4, 0x8D, 'a', 'n',
#define s_3_26 s_3_7
#define s_3_27 s_3_3
#define s_3_28 219
0xC5, 0xA1, 't', 'i', 'n',
#define s_3_29 224
'o', 'v', 'i', 'n',
#define s_3_30 228
't', 'e', 'l', 'n',
#define s_3_31 232
0xC3, 0xA1, 'r', 'n',
#define s_3_32 236
0xC3, 0xAD, 'r', 'n',
#define s_3_33 (s_3_34 + 1)
#define s_3_34 240
'l', 'o', 'u', 'n',
#define s_3_35 s_3_19
#define s_3_36 (s_3_37 + 1)
#define s_3_37 244
'k', 'y', 'n',
#define s_3_38 247
0xC4, 0x8D, 'n',
#define s_3_39 250
0xC4, 0x9B, 'n',
#define s_3_40 (s_3_41 + 1)
#define s_3_41 253
'i', 0xC3, 0xA1, 'n',
#define s_3_42 257
0xC3, 0xAD, 'n',
#define s_3_43 260
'a', 's',
#define s_3_44 s_3_1
#define s_3_45 262
'o', 't',
#define s_3_46 264
'i', 's', 't',
#define s_3_47 (s_3_48 + 1)
#define s_3_48 267
'n', 'o', 's', 't',
#define s_3_49 271
'o', 'u', 't',
#define s_3_50 274
'o', 'v', 'i', 0xC5, 0xA1, 't',
#define s_3_51 280
'i', 'v',
#define s_3_52 s_3_5
#define s_3_53 (s_3_54 + 1)
#define s_3_54 282
'c', 't', 'v',
#define s_3_55 (s_3_56 + 2)
#define s_3_56 285
'o', 'v', 's', 't', 'v',
#define s_3_57 290
'o', 'v', 't', 'v',
#define s_3_58 294
'o', 0xC5, 0x88,
#define s_3_59 297
'a', 0xC4, 0x8D,
#define s_3_60 300
0xC3, 0xA1, 0xC4, 0x8D,
#define s_3_61 (s_3_62 + 1)
#define s_3_62 304
'k', 0xC3, 0xA1, 0xC5, 0x99,
#define s_3_63 309
'i', 'o', 'n', 0xC3, 0xA1, 0xC5, 0x99,
#define s_3_64 (s_3_65 + 1)
#define s_3_65 316
'n', 0xC3, 0xA9, 0xC5, 0x99,
#define s_3_66 321
0xC3, 0xAD, 0xC5, 0x99,
#define s_3_67 325
'o', 'u', 0xC5, 0xA1,
#define s_4_0 329
'c',
#define s_4_1 330
'k',
#define s_4_2 331
'l',
#define s_4_3 332
'n',
#define s_4_4 333
't',
#define s_4_5 334
0xC4, 0x8D,
#define s_5_0 336
'i', 's', 'k',
#define s_5_1 339
0xC3, 0xA1, 'k',
#define s_5_2 342
'i', 'z', 'n',
#define s_5_3 345
'a', 'j', 'z', 'n',
#define s_6_0 (s_6_1 + 1)
#define s_6_1 349
'a', 'k',
#define s_6_2 (s_6_3 + 2)
#define s_6_3 351
'a', 'n', 'e', 'k',
#define s_6_4 355
'e', 'n', 'e', 'k',
#define s_6_5 359
'i', 'n', 'e', 'k',
#define s_6_6 363
'o', 'n', 'e', 'k',
#define s_6_7 367
'u', 'n', 'e', 'k',
#define s_6_8 371
0xC3, 0xA1, 'n', 'e', 'k',
#define s_6_9 376
'a', 0xC4, 0x8D, 'e', 'k',
#define s_6_10 381
'e', 0xC4, 0x8D, 'e', 'k',
#define s_6_11 386
'i', 0xC4, 0x8D, 'e', 'k',
#define s_6_12 391
'o', 0xC4, 0x8D, 'e', 'k',
#define s_6_13 396
'u', 0xC4, 0x8D, 'e', 'k',
#define s_6_14 401
0xC3, 0xA1, 0xC4, 0x8D, 'e', 'k',
#define s_6_15 407
0xC3, 0xA9, 0xC4, 0x8D, 'e', 'k',
#define s_6_16 413
0xC3, 0xAD, 0xC4, 0x8D, 'e', 'k',
#define s_6_17 419
'o', 'u', 0xC5, 0xA1, 'e', 'k',
#define s_6_18 425
'i', 'k',
#define s_6_19 427
'a', 'n', 'k',
#define s_6_20 430
'e', 'n', 'k',
#define s_6_21 433
'i', 'n', 'k',
#define s_6_22 436
'o', 'n', 'k',
#define s_6_23 439
'u', 'n', 'k',
#define s_6_24 442
0xC3, 0xA1, 'n', 'k',
#define s_6_25 446
0xC3, 0xA9, 'n', 'k',
#define s_6_26 450
0xC3, 0xAD, 'n', 'k',
#define s_6_27 454
'o', 'k',
#define s_6_28 456
0xC3, 0xA1, 't', 'k',
#define s_6_29 460
'u', 'k',
#define s_6_30 462
'a', 0xC4, 0x8D, 'k',
#define s_6_31 466
'e', 0xC4, 0x8D, 'k',
#define s_6_32 470
'i', 0xC4, 0x8D, 'k',
#define s_6_33 474
'o', 0xC4, 0x8D, 'k',
#define s_6_34 478
'u', 0xC4, 0x8D, 'k',
#define s_6_35 482
0xC3, 0xA1, 0xC4, 0x8D, 'k',
#define s_6_36 487
0xC3, 0xA9, 0xC4, 0x8D, 'k',
#define s_6_37 492
0xC3, 0xAD, 0xC4, 0x8D, 'k',
#define s_6_38 497
0xC3, 0xA1, 'k',
#define s_6_39 500
'u', 0xC5, 0xA1, 'k',
#define s_6_40 504
0xC3, 0xA9, 'k',
#define s_6_41 507
0xC3, 0xAD, 'k',
#define s_7_0 510
'e', 'j', 0xC5, 0xA1,
#define s_7_1 514
0xC4, 0x9B, 'j', 0xC5, 0xA1,
};


static const struct among a_0[14] =
{
/*  0 */ { 2, s_0_0, -1, 1},
/*  1 */ { 2, s_0_1, -1, 2},
/*  2 */ { 3, s_0_2, -1, 2},
/*  3 */ { 2, s_0_3, -1, 1},
/*  4 */ { 4, s_0_4, -1, 3},
/*  5 */ { 4, s_0_5, -1, 4},
/*  6 */ { 2, s_0_6, -1, 2},
/*  7 */ { 3, s_0_7, -1, 1},
/*  8 */ { 3, s_0_8, -1, 2},
/*  9 */ { 2, s_0_9, -1, 1},
/* 10 */ { 5, s_0_10, -1, 3},
/* 11 */ { 5, s_0_11, -1, 4},
/* 12 */ { 5, s_0_12, -1, 3},
/* 13 */ { 5, s_0_13, -1, 4}
};


static const struct among a_1[3] =
{
/*  0 */ { 2, s_1_0, -1, 2},
/*  1 */ { 2, s_1_1, -1, 1},
/*  2 */ { 3, s_1_2, -1, 1}
};


static const struct among a_2[48] =
{
/*  0 */ { 1, s_2_0, -1, 1},
/*  1 */ { 3, s_2_1, 0, 1},
/*  2 */ { 3, s_2_2, 0, 1},
/*  3 */ { 1, s_2_3, -1, 2},
/*  4 */ { 4, s_2_4, 3, 2},
/*  5 */ { 3, s_2_5, -1, 2},
/*  6 */ { 5, s_2_6, 5, 1},
/*  7 */ { 3, s_2_7, -1, 2},
/*  8 */ { 4, s_2_8, -1, 1},
/*  9 */ { 4, s_2_9, -1, 2},
/* 10 */ { 4, s_2_10, -1, 1},
/* 11 */ { 1, s_2_11, -1, 2},
/* 12 */ { 2, s_2_12, 11, 1},
/* 13 */ { 3, s_2_13, 12, 1},
/* 14 */ { 3, s_2_14, 12, 2},
/* 15 */ { 4, s_2_15, 12, 2},
/* 16 */ { 4, s_2_16, 12, 2},
/* 17 */ { 4, s_2_17, 12, 1},
/* 18 */ { 4, s_2_18, 11, 2},
/* 19 */ { 3, s_2_19, 11, 1},
/* 20 */ { 2, s_2_20, -1, 3},
/* 21 */ { 5, s_2_21, 20, 1},
/* 22 */ { 3, s_2_22, -1, 1},
/* 23 */ { 3, s_2_23, -1, 2},
/* 24 */ { 3, s_2_24, -1, 2},
/* 25 */ { 5, s_2_25, -1, 1},
/* 26 */ { 3, s_2_26, -1, 1},
/* 27 */ { 1, s_2_27, -1, 1},
/* 28 */ { 3, s_2_28, 27, 2},
/* 29 */ { 4, s_2_29, 27, 2},
/* 30 */ { 4, s_2_30, 27, 2},
/* 31 */ { 2, s_2_31, -1, 2},
/* 32 */ { 2, s_2_32, -1, 1},
/* 33 */ { 2, s_2_33, -1, 1},
/* 34 */ { 2, s_2_34, -1, 1},
/* 35 */ { 1, s_2_35, -1, 1},
/* 36 */ { 3, s_2_36, 35, 2},
/* 37 */ { 4, s_2_37, 35, 2},
/* 38 */ { 2, s_2_38, 35, 1},
/* 39 */ { 1, s_2_39, -1, 1},
/* 40 */ { 3, s_2_40, 39, 1},
/* 41 */ { 2, s_2_41, -1, 2},
/* 42 */ { 2, s_2_42, -1, 1},
/* 43 */ { 2, s_2_43, -1, 1},
/* 44 */ { 4, s_2_44, 43, 1},
/* 45 */ { 2, s_2_45, -1, 2},
/* 46 */ { 2, s_2_46, -1, 1},
/* 47 */ { 2, s_2_47, -1, 1}
};


static const struct among a_3[68] =
{
/*  0 */ { 2, s_3_0, -1, 1},
/*  1 */ { 3, s_3_1, -1, 2},
/*  2 */ { 2, s_3_2, -1, 3},
/*  3 */ { 4, s_3_3, 2, 2},
/*  4 */ { 6, s_3_4, 3, 1},
/*  5 */ { 4, s_3_5, 2, 1},
/*  6 */ { 2, s_3_6, -1, 2},
/*  7 */ { 4, s_3_7, 6, 3},
/*  8 */ { 3, s_3_8, -1, 1},
/*  9 */ { 5, s_3_9, -1, 1},
/* 10 */ { 2, s_3_10, -1, 1},
/* 11 */ { 3, s_3_11, -1, 2},
/* 12 */ { 5, s_3_12, 11, 1},
/* 13 */ { 2, s_3_13, -1, 1},
/* 14 */ { 2, s_3_14, -1, 1},
/* 15 */ { 3, s_3_15, -1, 1},
/* 16 */ { 4, s_3_16, -1, 2},
/* 17 */ { 4, s_3_17, -1, 1},
/* 18 */ { 4, s_3_18, -1, 1},
/* 19 */ { 6, s_3_19, 18, 1},
/* 20 */ { 5, s_3_20, -1, 1},
/* 21 */ { 2, s_3_21, -1, 1},
/* 22 */ { 4, s_3_22, -1, 2},
/* 23 */ { 2, s_3_23, -1, 1},
/* 24 */ { 2, s_3_24, -1, 1},
/* 25 */ { 4, s_3_25, 24, 1},
/* 26 */ { 2, s_3_26, -1, 3},
/* 27 */ { 2, s_3_27, -1, 2},
/* 28 */ { 5, s_3_28, 27, 1},
/* 29 */ { 4, s_3_29, 27, 1},
/* 30 */ { 4, s_3_30, -1, 1},
/* 31 */ { 4, s_3_31, -1, 1},
/* 32 */ { 4, s_3_32, -1, 6},
/* 33 */ { 3, s_3_33, -1, 1},
/* 34 */ { 4, s_3_34, 33, 1},
/* 35 */ { 3, s_3_35, -1, 1},
/* 36 */ { 2, s_3_36, -1, 1},
/* 37 */ { 3, s_3_37, 36, 1},
/* 38 */ { 3, s_3_38, -1, 1},
/* 39 */ { 3, s_3_39, -1, 5},
/* 40 */ { 3, s_3_40, -1, 1},
/* 41 */ { 4, s_3_41, 40, 2},
/* 42 */ { 3, s_3_42, -1, 6},
/* 43 */ { 2, s_3_43, -1, 1},
/* 44 */ { 2, s_3_44, -1, 2},
/* 45 */ { 2, s_3_45, -1, 1},
/* 46 */ { 3, s_3_46, -1, 2},
/* 47 */ { 3, s_3_47, -1, 1},
/* 48 */ { 4, s_3_48, 47, 1},
/* 49 */ { 3, s_3_49, -1, 1},
/* 50 */ { 6, s_3_50, -1, 1},
/* 51 */ { 2, s_3_51, -1, 2},
/* 52 */ { 2, s_3_52, -1, 1},
/* 53 */ { 2, s_3_53, -1, 1},
/* 54 */ { 3, s_3_54, 53, 1},
/* 55 */ { 3, s_3_55, 53, 1},
/* 56 */ { 5, s_3_56, 55, 1},
/* 57 */ { 4, s_3_57, 53, 1},
/* 58 */ { 3, s_3_58, -1, 1},
/* 59 */ { 3, s_3_59, -1, 1},
/* 60 */ { 4, s_3_60, -1, 1},
/* 61 */ { 4, s_3_61, -1, 1},
/* 62 */ { 5, s_3_62, 61, 1},
/* 63 */ { 7, s_3_63, 61, 2},
/* 64 */ { 4, s_3_64, -1, 4},
/* 65 */ { 5, s_3_65, 64, 1},
/* 66 */ { 4, s_3_66, -1, 6},
/* 67 */ { 4, s_3_67, -1, 1}
};


static const struct among a_4[6] =
{
/*  0 */ { 1, s_4_0, -1, 1},
/*  1 */ { 1, s_4_1, -1, 1},
/*  2 */ { 1, s_4_2, -1, 1},
/*  3 */ { 1, s_4_3, -1, 1},
/*  4 */ { 1, s_4_4, -1, 1},
/*  5 */ { 2, s_4_5, -1, 1}
};


static const struct among a_5[4] =
{
/*  0 */ { 3, s_5_0, -1, 2},
/*  1 */ { 3, s_5_1, -1, 1},
/*  2 */ { 3, s_5_2, -1, 2},
/*  3 */ { 4, s_5_3, -1, 1}
};


static const struct among a_6[42] =
{
/*  0 */ { 1, s_6_0, -1, 1},
/*  1 */ { 2, s_6_1, 0, 7},
/*  2 */ { 2, s_6_2, 0, 2},
/*  3 */ { 4, s_6_3, 2, 1},
/*  4 */ { 4, s_6_4, 2, 2},
/*  5 */ { 4, s_6_5, 2, 4},
/*  6 */ { 4, s_6_6, 2, 1},
/*  7 */ { 4, s_6_7, 2, 1},
/*  8 */ { 5, s_6_8, 2, 1},
/*  9 */ { 5, s_6_9, 2, 1},
/* 10 */ { 5, s_6_10, 2, 2},
/* 11 */ { 5, s_6_11, 2, 4},
/* 12 */ { 5, s_6_12, 2, 1},
/* 13 */ { 5, s_6_13, 2, 1},
/* 14 */ { 6, s_6_14, 2, 1},
/* 15 */ { 6, s_6_15, 2, 3},
/* 16 */ { 6, s_6_16, 2, 5},
/* 17 */ { 6, s_6_17, 2, 1},
/* 18 */ { 2, s_6_18, 0, 4},
/* 19 */ { 3, s_6_19, 0, 1},
/* 20 */ { 3, s_6_20, 0, 1},
/* 21 */ { 3, s_6_21, 0, 1},
/* 22 */ { 3, s_6_22, 0, 1},
/* 23 */ { 3, s_6_23, 0, 1},
/* 24 */ { 4, s_6_24, 0, 1},
/* 25 */ { 4, s_6_25, 0, 1},
/* 26 */ { 4, s_6_26, 0, 1},
/* 27 */ { 2, s_6_27, 0, 8},
/* 28 */ { 4, s_6_28, 0, 1},
/* 29 */ { 2, s_6_29, 0, 9},
/* 30 */ { 4, s_6_30, 0, 1},
/* 31 */ { 4, s_6_31, 0, 1},
/* 32 */ { 4, s_6_32, 0, 1},
/* 33 */ { 4, s_6_33, 0, 1},
/* 34 */ { 4, s_6_34, 0, 1},
/* 35 */ { 5, s_6_35, 0, 1},
/* 36 */ { 5, s_6_36, 0, 1},
/* 37 */ { 5, s_6_37, 0, 1},
/* 38 */ { 3, s_6_38, 0, 6},
/* 39 */ { 4, s_6_39, 0, 1},
/* 40 */ { 3, s_6_40, 0, 3},
/* 41 */ { 3, s_6_41, 0, 5}
};


static const struct among a_7[2] =
{
/*  0 */ { 4, s_7_0, -1, 2},
/*  1 */ { 5, s_7_1, -1, 1}
};

static const unsigned char g_v[] = { 17, 65, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 4, 18, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64 };

static const symbol s_0[] = { 'k' };
static const symbol s_1[] = { 'h' };
static const symbol s_2[] = { 'c', 'k' };
static const symbol s_3[] = { 's', 'k' };
static const symbol s_4[] = { 'e' };
static const symbol s_5[] = { 'i' };
static const symbol s_6[] = { 'e' };
static const symbol s_7[] = { 0xC3, 0xA9 };
static const symbol s_8[] = { 0xC4, 0x9B };
static const symbol s_9[] = { 0xC3, 0xAD };
static const symbol s_10[] = { 'i' };
static const symbol s_11[] = { 'e' };
static const symbol s_12[] = { 0xC3, 0xA9 };
static const symbol s_13[] = { 'i' };
static const symbol s_14[] = { 0xC3, 0xAD };
static const symbol s_15[] = { 0xC3, 0xA1 };
static const symbol s_16[] = { 'a' };
static const symbol s_17[] = { 'o' };
static const symbol s_18[] = { 'u' };
static const symbol s_19[] = { 0xC4, 0x9B };
static const symbol s_20[] = { 'e' };

int Xapian::InternalStemCzech::r_mark_regions() {
    I_pV = l;
    I_p1 = l;
    {   int c1 = c;
        {   
            int ret = in_grouping_U(g_v, 97, 367, 1);
            if (ret < 0) goto lab0;
            c += ret;
        }
        I_pV = c;
        {   
            int ret = in_grouping_U(g_v, 97, 367, 1);
            if (ret < 0) goto lab0;
            c += ret;
        }
        {   
            int ret = out_grouping_U(g_v, 97, 367, 1);
            if (ret < 0) goto lab0;
            c += ret;
        }
        I_p1 = c;
    lab0:
        c = c1;
    }
    return 1;
}

int Xapian::InternalStemCzech::r_RV() {
    if (!(I_pV <= c)) return 0;
    return 1;
}

int Xapian::InternalStemCzech::r_R1() {
    if (!(I_p1 <= c)) return 0;
    return 1;
}

int Xapian::InternalStemCzech::r_palatalise() {
    int among_var;
    ket = c;
    among_var = find_among_b(s_pool, a_0, 14, 0, 0);
    if (!(among_var)) return 0;
    bra = c;
    {   int ret = r_RV();
        if (ret <= 0) return ret;
    }
    switch (among_var) {
        case 1:
            {   int ret = slice_from_s(1, s_0);
                if (ret < 0) return ret;
            }
            break;
        case 2:
            {   int ret = slice_from_s(1, s_1);
                if (ret < 0) return ret;
            }
            break;
        case 3:
            {   int ret = slice_from_s(2, s_2);
                if (ret < 0) return ret;
            }
            break;
        case 4:
            {   int ret = slice_from_s(2, s_3);
                if (ret < 0) return ret;
            }
            break;
    }
    return 1;
}

int Xapian::InternalStemCzech::r_do_possessive() {
    int among_var;
    ket = c;
    if (c - 1 <= lb || (p[c - 1] != 110 && p[c - 1] != 118)) return 0;
    among_var = find_among_b(s_pool, a_1, 3, 0, 0);
    if (!(among_var)) return 0;
    bra = c;
    {   int ret = r_RV();
        if (ret <= 0) return ret;
    }
    switch (among_var) {
        case 1:
            {   int ret = slice_del();
                if (ret < 0) return ret;
            }
            break;
        case 2:
            {   int ret = slice_del();
                if (ret < 0) return ret;
            }
            {   int m1 = l - c; (void)m1;
                {   int ret = r_palatalise();
                    if (ret == 0) { c = l - m1; goto lab0; }
                    if (ret < 0) return ret;
                }
            lab0:
                ;
            }
            break;
    }
    return 1;
}

int Xapian::InternalStemCzech::r_do_case() {
    int among_var;
    ket = c;
    among_var = find_among_b(s_pool, a_2, 48, 0, 0);
    if (!(among_var)) return 0;
    bra = c;
    switch (among_var) {
        case 1:
            {   int ret = slice_del();
                if (ret < 0) return ret;
            }
            break;
        case 2:
            {   int ret = slice_del();
                if (ret < 0) return ret;
            }
            {   int m1 = l - c; (void)m1;
                {   int ret = r_palatalise();
                    if (ret == 0) { c = l - m1; goto lab0; }
                    if (ret < 0) return ret;
                }
            lab0:
                ;
            }
            break;
        case 3:
            {   int ret = slice_from_s(1, s_4);
                if (ret < 0) return ret;
            }
            {   int m2 = l - c; (void)m2;
                {   int ret = r_palatalise();
                    if (ret == 0) { c = l - m2; goto lab1; }
                    if (ret < 0) return ret;
                }
            lab1:
                ;
            }
            break;
    }
    return 1;
}

int Xapian::InternalStemCzech::r_do_derivational() {
    int among_var;
    ket = c;
    among_var = find_among_b(s_pool, a_3, 68, 0, 0);
    if (!(among_var)) return 0;
    bra = c;
    {   int ret = r_R1();
        if (ret <= 0) return ret;
    }
    switch (among_var) {
        case 1:
            {   int ret = slice_del();
                if (ret < 0) return ret;
            }
            break;
        case 2:
            {   int ret = slice_from_s(1, s_5);
                if (ret < 0) return ret;
            }
            {   int ret = r_palatalise();
                if (ret <= 0) return ret;
            }
            break;
        case 3:
            {   int ret = slice_from_s(1, s_6);
                if (ret < 0) return ret;
            }
            {   int ret = r_palatalise();
                if (ret <= 0) return ret;
            }
            break;
        case 4:
            {   int ret = slice_from_s(2, s_7);
                if (ret < 0) return ret;
            }
            {   int ret = r_palatalise();
                if (ret <= 0) return ret;
            }
            break;
        case 5:
            {   int ret = slice_from_s(2, s_8);
                if (ret < 0) return ret;
            }
            {   int ret = r_palatalise();
                if (ret <= 0) return ret;
            }
            break;
        case 6:
            {   int ret = slice_from_s(2, s_9);
                if (ret < 0) return ret;
            }
            {   int ret = r_palatalise();
                if (ret <= 0) return ret;
            }
            break;
    }
    return 1;
}

int Xapian::InternalStemCzech::r_do_deriv_single() {
    ket = c;
    if (!(find_among_b(s_pool, a_4, 6, 0, 0))) return 0;
    bra = c;
    {   int ret = slice_del();
        if (ret < 0) return ret;
    }
    return 1;
}

int Xapian::InternalStemCzech::r_do_augmentative() {
    int among_var;
    ket = c;
    if (c - 2 <= lb || (p[c - 1] != 107 && p[c - 1] != 110)) return 0;
    among_var = find_among_b(s_pool, a_5, 4, 0, 0);
    if (!(among_var)) return 0;
    bra = c;
    switch (among_var) {
        case 1:
            {   int ret = slice_del();
                if (ret < 0) return ret;
            }
            break;
        case 2:
            {   int ret = slice_from_s(1, s_10);
                if (ret < 0) return ret;
            }
            {   int ret = r_palatalise();
                if (ret <= 0) return ret;
            }
            break;
    }
    return 1;
}

int Xapian::InternalStemCzech::r_do_diminutive() {
    int among_var;
    ket = c;
    if (c <= lb || p[c - 1] != 107) return 0;
    among_var = find_among_b(s_pool, a_6, 42, 0, 0);
    if (!(among_var)) return 0;
    bra = c;
    switch (among_var) {
        case 1:
            {   int ret = slice_del();
                if (ret < 0) return ret;
            }
            break;
        case 2:
            {   int ret = slice_from_s(1, s_11);
                if (ret < 0) return ret;
            }
            {   int ret = r_palatalise();
                if (ret <= 0) return ret;
            }
            break;
        case 3:
            {   int ret = slice_from_s(2, s_12);
                if (ret < 0) return ret;
            }
            {   int ret = r_palatalise();
                if (ret <= 0) return ret;
            }
            break;
        case 4:
            {   int ret = slice_from_s(1, s_13);
                if (ret < 0) return ret;
            }
            {   int ret = r_palatalise();
                if (ret <= 0) return ret;
            }
            break;
        case 5:
            {   int ret = slice_from_s(2, s_14);
                if (ret < 0) return ret;
            }
            {   int ret = r_palatalise();
                if (ret <= 0) return ret;
            }
            break;
        case 6:
            {   int ret = slice_from_s(2, s_15);
                if (ret < 0) return ret;
            }
            break;
        case 7:
            {   int ret = slice_from_s(1, s_16);
                if (ret < 0) return ret;
            }
            break;
        case 8:
            {   int ret = slice_from_s(1, s_17);
                if (ret < 0) return ret;
            }
            break;
        case 9:
            {   int ret = slice_from_s(1, s_18);
                if (ret < 0) return ret;
            }
            break;
    }
    return 1;
}

int Xapian::InternalStemCzech::r_do_comparative() {
    int among_var;
    ket = c;
    if (c - 3 <= lb || p[c - 1] != 161) return 0;
    among_var = find_among_b(s_pool, a_7, 2, 0, 0);
    if (!(among_var)) return 0;
    bra = c;
    switch (among_var) {
        case 1:
            {   int ret = slice_from_s(2, s_19);
                if (ret < 0) return ret;
            }
            {   int ret = r_palatalise();
                if (ret <= 0) return ret;
            }
            break;
        case 2:
            {   int ret = slice_from_s(1, s_20);
                if (ret < 0) return ret;
            }
            {   int ret = r_palatalise();
                if (ret <= 0) return ret;
            }
            break;
    }
    return 1;
}

int Xapian::InternalStemCzech::r_do_aggressive() {
    {   int m1 = l - c; (void)m1;
        {   int ret = r_do_comparative();
            if (ret < 0) return ret;
        }
        c = l - m1;
    }
    {   int m2 = l - c; (void)m2;
        {   int ret = r_do_diminutive();
            if (ret < 0) return ret;
        }
        c = l - m2;
    }
    {   int m3 = l - c; (void)m3;
        {   int ret = r_do_augmentative();
            if (ret < 0) return ret;
        }
        c = l - m3;
    }
    {   int m4 = l - c; (void)m4;
        {   int ret = r_do_derivational();
            if (ret == 0) goto lab1;
            if (ret < 0) return ret;
        }
        goto lab0;
    lab1:
        c = l - m4;
        {   int ret = r_do_deriv_single();
            if (ret <= 0) return ret;
        }
    }
lab0:
    return 1;
}

int Xapian::InternalStemCzech::stem() {
    
    {   int ret = r_mark_regions();
        if (ret < 0) return ret;
    }
    lb = c; c = l;

    {   int ret = r_do_case();
        if (ret <= 0) return ret;
    }
    {   int ret = r_do_possessive();
        if (ret <= 0) return ret;
    }
    {   int ret = r_do_aggressive();
        if (ret <= 0) return ret;
    }
    c = lb;
    return 1;
}

Xapian::InternalStemCzech::InternalStemCzech()
    : I_p1(0), I_pV(0)
{
}

Xapian::InternalStemCzech::~InternalStemCzech()
{
}

std::string
Xapian::InternalStemCzech::get_description() const
{
    return "czech";
}

/* Generated by Snowball 2.0.0 - https://snowballstem.org/ */


#include <config.h>
#include <limits.h>
#include "polish.h"

static const symbol s_0[] = { 'z', 'a', 'c', 'j', 'a' };
static const symbol s_1[] = { 'z', 'a', 'c', 'j', 'a' };
static const symbol s_2[] = { 'z', 'a', 'c', 'j', 'i' };
static const symbol s_3[] = { 'a', 'c', 'j', 'a' };
static const symbol s_4[] = { 'a', 'c', 'j', 'i' };
static const symbol s_5[] = { 'a', 'c', 'j', 0xC4, 0x85 };
static const symbol s_6[] = { 't', 'a', 'c', 'h' };
static const symbol s_7[] = { 'a', 'n', 'i', 'e' };
static const symbol s_8[] = { 'e', 'n', 'i', 'e' };
static const symbol s_9[] = { 'e', 'n', 'i', 'u' };
static const symbol s_10[] = { 'a', 'n', 'i', 'u' };
static const symbol s_11[] = { 't', 'y', 'k', 'a' };
static const symbol s_12[] = { 'a', 'c', 'h' };
static const symbol s_13[] = { 'a', 'm', 'i' };
static const symbol s_14[] = { 'n', 'i', 'a' };
static const symbol s_15[] = { 'n', 'i', 'u' };
static const symbol s_16[] = { 'c', 'i', 'a' };
static const symbol s_17[] = { 'c', 'i', 'u' };
static const symbol s_18[] = { 'c', 'j', 'i' };
static const symbol s_19[] = { 'c', 'j', 'a' };
static const symbol s_20[] = { 'c', 'j', 0xC4, 0x85 };
static const symbol s_21[] = { 'c', 'e' };
static const symbol s_22[] = { 't', 'a' };
static const symbol s_23[] = { 'e', 'c', 'z', 'e', 'k' };
static const symbol s_24[] = { 'i', 'c', 'z', 'e', 'k' };
static const symbol s_25[] = { 'i', 's', 'z', 'e', 'k' };
static const symbol s_26[] = { 'a', 's', 'z', 'e', 'k' };
static const symbol s_27[] = { 'u', 's', 'z', 'e', 'k' };
static const symbol s_28[] = { 'e', 'n', 'e', 'k' };
static const symbol s_29[] = { 'e', 'j', 'e', 'k' };
static const symbol s_30[] = { 'e', 'r', 'e', 'k' };
static const symbol s_31[] = { 'e', 'k' };
static const symbol s_32[] = { 'a', 'k' };
static const symbol s_33[] = { 'n', 'a', 'j' };
static const symbol s_34[] = { 's', 'z', 'e' };
static const symbol s_35[] = { 's', 'z', 'y' };
static const symbol s_36[] = { 'n', 'a', 'j' };
static const symbol s_37[] = { 's', 'z', 'y', 'c', 'h' };
static const symbol s_38[] = { 'c', 'z', 'n', 'y' };
static const symbol s_39[] = { 'o', 'w', 'y' };
static const symbol s_40[] = { 'o', 'w', 'a' };
static const symbol s_41[] = { 'o', 'w', 'e' };
static const symbol s_42[] = { 'y', 'c', 'h' };
static const symbol s_43[] = { 'e', 'g', 'o' };
static const symbol s_44[] = { 'e', 'j' };
static const symbol s_45[] = { 'b', 'y', 'm' };
static const symbol s_46[] = { 'e', 's', 'z' };
static const symbol s_47[] = { 'a', 's', 'z' };
static const symbol s_48[] = { 'c', 'i', 'e' };
static const symbol s_49[] = { 'e', 0xC5, 0x9B, 0xC4, 0x87 };
static const symbol s_50[] = { 'a', 0xC5, 0x9B, 'c' };
static const symbol s_51[] = { 0xC5, 0x82, 'e', 'm' };
static const symbol s_52[] = { 'a', 'm', 'y' };
static const symbol s_53[] = { 'e', 'm', 'y' };
static const symbol s_54[] = { 'a', 0xC4, 0x87 };
static const symbol s_55[] = { 'e', 0xC4, 0x87 };
static const symbol s_56[] = { 'e', 'm' };
static const symbol s_57[] = { 'a', 'm' };
static const symbol s_58[] = { 'a', 0xC5, 0x82 };
static const symbol s_59[] = { 'i', 0xC5, 0x82 };
static const symbol s_60[] = { 'i', 0xC4, 0x87 };
static const symbol s_61[] = { 0xC4, 0x85, 'c' };
static const symbol s_62[] = { 'a', 'j' };
static const symbol s_63[] = { 'n', 'i', 'e' };
static const symbol s_64[] = { 'w', 'i', 'e' };
static const symbol s_65[] = { 'r', 'z', 'e' };
static const symbol s_66[] = { 0xC3, 0xB3, 'w' };
static const symbol s_67[] = { 'o', 'm' };
static const symbol s_68[] = { 'a', 'm', 'i' };
static const symbol s_69[] = { 'i', 'a' };
static const symbol s_70[] = { 'i', 'e' };
static const symbol s_71[] = { 0xC4, 0x85 };
static const symbol s_72[] = { 0xC4, 0x99 };
static const symbol s_73[] = { 0xC5, 0x82 };

int Xapian::InternalStemPolish::r_remove_nouns() {
    {   int c1 = c;
        if (!(len_utf8(p) > 7)) goto lab1;
        {   int c_test2 = c;
            I_pos = (len_utf8(p) - 5);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) goto lab1;
                c = ret;
            }
            {   int c3 = c;
                if (!(eq_s(5, s_0))) goto lab3;
                goto lab2;
            lab3:
                c = c3;
                if (!(eq_s(5, s_1))) goto lab4;
                goto lab2;
            lab4:
                c = c3;
                if (!(eq_s(5, s_2))) goto lab1;
            }
        lab2:
            c = c_test2;
        }
        I_pos = (len_utf8(p) - 4);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) goto lab1;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        goto lab0;
    lab1:
        c = c1;
        if (!(len_utf8(p) > 6)) goto lab5;
        {   int c_test4 = c;
            I_pos = (len_utf8(p) - 4);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) goto lab5;
                c = ret;
            }
            {   int c5 = c;
                if (!(eq_s(4, s_3))) goto lab7;
                goto lab6;
            lab7:
                c = c5;
                if (!(eq_s(4, s_4))) goto lab8;
                goto lab6;
            lab8:
                c = c5;
                if (!(eq_s(5, s_5))) goto lab9;
                goto lab6;
            lab9:
                c = c5;
                if (!(eq_s(4, s_6))) goto lab10;
                goto lab6;
            lab10:
                c = c5;
                if (!(eq_s(4, s_7))) goto lab11;
                goto lab6;
            lab11:
                c = c5;
                if (!(eq_s(4, s_8))) goto lab12;
                goto lab6;
            lab12:
                c = c5;
                if (!(eq_s(4, s_9))) goto lab13;
                goto lab6;
            lab13:
                c = c5;
                if (!(eq_s(4, s_10))) goto lab5;
            }
        lab6:
            c = c_test4;
        }
        I_pos = (len_utf8(p) - 4);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) goto lab5;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        goto lab0;
    lab5:
        c = c1;
        if (!(len_utf8(p) > 6)) goto lab14;
        {   int c_test6 = c;
            I_pos = (len_utf8(p) - 4);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) goto lab14;
                c = ret;
            }
            if (!(eq_s(4, s_11))) goto lab14;
            c = c_test6;
        }
        I_pos = (len_utf8(p) - 2);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) goto lab14;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        goto lab0;
    lab14:
        c = c1;
        if (!(len_utf8(p) > 5)) goto lab15;
        {   int c_test7 = c;
            I_pos = (len_utf8(p) - 3);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) goto lab15;
                c = ret;
            }
            {   int c8 = c;
                if (!(eq_s(3, s_12))) goto lab17;
                goto lab16;
            lab17:
                c = c8;
                if (!(eq_s(3, s_13))) goto lab18;
                goto lab16;
            lab18:
                c = c8;
                if (!(eq_s(3, s_14))) goto lab19;
                goto lab16;
            lab19:
                c = c8;
                if (!(eq_s(3, s_15))) goto lab20;
                goto lab16;
            lab20:
                c = c8;
                if (!(eq_s(3, s_16))) goto lab21;
                goto lab16;
            lab21:
                c = c8;
                if (!(eq_s(3, s_17))) goto lab15;
            }
        lab16:
            c = c_test7;
        }
        I_pos = (len_utf8(p) - 3);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) goto lab15;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        goto lab0;
    lab15:
        c = c1;
        if (!(len_utf8(p) > 5)) goto lab22;
        {   int c_test9 = c;
            I_pos = (len_utf8(p) - 3);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) goto lab22;
                c = ret;
            }
            {   int c10 = c;
                if (!(eq_s(3, s_18))) goto lab24;
                goto lab23;
            lab24:
                c = c10;
                if (!(eq_s(3, s_19))) goto lab25;
                goto lab23;
            lab25:
                c = c10;
                if (!(eq_s(4, s_20))) goto lab22;
            }
        lab23:
            c = c_test9;
        }
        I_pos = (len_utf8(p) - 2);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) goto lab22;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        goto lab0;
    lab22:
        c = c1;
        if (!(len_utf8(p) > 5)) return 0;
        {   int c_test11 = c;
            I_pos = (len_utf8(p) - 2);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) return 0;
                c = ret;
            }
            {   int c12 = c;
                if (!(eq_s(2, s_21))) goto lab27;
                goto lab26;
            lab27:
                c = c12;
                if (!(eq_s(2, s_22))) return 0;
            }
        lab26:
            c = c_test11;
        }
        I_pos = (len_utf8(p) - 2);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) return 0;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
    }
lab0:
    return 1;
}

int Xapian::InternalStemPolish::r_remove_dimunitive() {
    {   int c1 = c;
        if (!(len_utf8(p) > 6)) goto lab1;
        {   int c_test2 = c;
            I_pos = (len_utf8(p) - 5);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) goto lab1;
                c = ret;
            }
            {   int c3 = c;
                if (!(eq_s(5, s_23))) goto lab3;
                goto lab2;
            lab3:
                c = c3;
                if (!(eq_s(5, s_24))) goto lab4;
                goto lab2;
            lab4:
                c = c3;
                if (!(eq_s(5, s_25))) goto lab5;
                goto lab2;
            lab5:
                c = c3;
                if (!(eq_s(5, s_26))) goto lab6;
                goto lab2;
            lab6:
                c = c3;
                if (!(eq_s(5, s_27))) goto lab1;
            }
        lab2:
            c = c_test2;
        }
        I_pos = (len_utf8(p) - 5);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) goto lab1;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        goto lab0;
    lab1:
        c = c1;
        if (!(len_utf8(p) > 6)) goto lab7;
        {   int c_test4 = c;
            I_pos = (len_utf8(p) - 4);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) goto lab7;
                c = ret;
            }
            {   int c5 = c;
                if (!(eq_s(4, s_28))) goto lab9;
                goto lab8;
            lab9:
                c = c5;
                if (!(eq_s(4, s_29))) goto lab10;
                goto lab8;
            lab10:
                c = c5;
                if (!(eq_s(4, s_30))) goto lab7;
            }
        lab8:
            c = c_test4;
        }
        I_pos = (len_utf8(p) - 2);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) goto lab7;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        goto lab0;
    lab7:
        c = c1;
        if (!(len_utf8(p) > 4)) return 0;
        {   int c_test6 = c;
            I_pos = (len_utf8(p) - 2);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) return 0;
                c = ret;
            }
            {   int c7 = c;
                if (!(eq_s(2, s_31))) goto lab12;
                goto lab11;
            lab12:
                c = c7;
                if (!(eq_s(2, s_32))) return 0;
            }
        lab11:
            c = c_test6;
        }
        I_pos = (len_utf8(p) - 2);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) return 0;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
    }
lab0:
    return 1;
}

int Xapian::InternalStemPolish::r_remove_adjective_ends() {
    {   int c1 = c;
        if (!(len_utf8(p) > 7)) goto lab1;
        {   int c_test2 = c;
            if (!(eq_s(3, s_33))) goto lab1;
            I_pos = ((l - c) - 3);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) goto lab1;
                c = ret;
            }
            {   int c3 = c;
                if (!(eq_s(3, s_34))) goto lab3;
                goto lab2;
            lab3:
                c = c3;
                if (!(eq_s(3, s_35))) goto lab1;
            }
        lab2:
            c = c_test2;
        }
        bra = c;
        {   int ret = skip_utf8(p, c, 0, l, + 3);
            if (ret < 0) goto lab1;
            c = ret;
        }
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        I_pos = ((l - c) - 3);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) goto lab1;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        goto lab0;
    lab1:
        c = c1;
        if (!(len_utf8(p) > 7)) goto lab4;
        {   int c_test4 = c;
            if (!(eq_s(3, s_36))) goto lab4;
            I_pos = ((l - c) - 5);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) goto lab4;
                c = ret;
            }
            if (!(eq_s(5, s_37))) goto lab4;
            c = c_test4;
        }
        bra = c;
        {   int ret = skip_utf8(p, c, 0, l, + 3);
            if (ret < 0) goto lab4;
            c = ret;
        }
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        I_pos = (len_utf8(p) - 5);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) goto lab4;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        goto lab0;
    lab4:
        c = c1;
        if (!(len_utf8(p) > 6)) goto lab5;
        {   int c_test5 = c;
            I_pos = (l - 4);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) goto lab5;
                c = ret;
            }
            if (!(eq_s(4, s_38))) goto lab5;
            c = c_test5;
        }
        I_pos = (len_utf8(p) - 4);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) goto lab5;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        goto lab0;
    lab5:
        c = c1;
        if (!(len_utf8(p) > 5)) goto lab6;
        {   int c_test6 = c;
            I_pos = (len_utf8(p) - 3);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) goto lab6;
                c = ret;
            }
            {   int c7 = c;
                if (!(eq_s(3, s_39))) goto lab8;
                goto lab7;
            lab8:
                c = c7;
                if (!(eq_s(3, s_40))) goto lab9;
                goto lab7;
            lab9:
                c = c7;
                if (!(eq_s(3, s_41))) goto lab10;
                goto lab7;
            lab10:
                c = c7;
                if (!(eq_s(3, s_42))) goto lab11;
                goto lab7;
            lab11:
                c = c7;
                if (!(eq_s(3, s_43))) goto lab6;
            }
        lab7:
            c = c_test6;
        }
        I_pos = (len_utf8(p) - 3);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) goto lab6;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        goto lab0;
    lab6:
        c = c1;
        if (!(len_utf8(p) > 5)) return 0;
        {   int c_test8 = c;
            I_pos = (len_utf8(p) - 2);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) return 0;
                c = ret;
            }
            if (!(eq_s(2, s_44))) return 0;
            c = c_test8;
        }
        I_pos = (len_utf8(p) - 2);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) return 0;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
    }
lab0:
    return 1;
}

int Xapian::InternalStemPolish::r_remove_verbs_ends() {
    {   int c1 = c;
        if (!(len_utf8(p) > 5)) goto lab1;
        {   int c_test2 = c;
            I_pos = (l - 3);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) goto lab1;
                c = ret;
            }
            if (!(eq_s(3, s_45))) goto lab1;
            c = c_test2;
        }
        I_pos = (len_utf8(p) - 3);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) goto lab1;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        goto lab0;
    lab1:
        c = c1;
        if (!(len_utf8(p) > 5)) goto lab2;
        {   int c_test3 = c;
            I_pos = (len_utf8(p) - 3);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) goto lab2;
                c = ret;
            }
            {   int c4 = c;
                if (!(eq_s(3, s_46))) goto lab4;
                goto lab3;
            lab4:
                c = c4;
                if (!(eq_s(3, s_47))) goto lab5;
                goto lab3;
            lab5:
                c = c4;
                if (!(eq_s(3, s_48))) goto lab6;
                goto lab3;
            lab6:
                c = c4;
                if (!(eq_s(5, s_49))) goto lab7;
                goto lab3;
            lab7:
                c = c4;
                if (!(eq_s(4, s_50))) goto lab8;
                goto lab3;
            lab8:
                c = c4;
                if (!(eq_s(4, s_51))) goto lab9;
                goto lab3;
            lab9:
                c = c4;
                if (!(eq_s(3, s_52))) goto lab10;
                goto lab3;
            lab10:
                c = c4;
                if (!(eq_s(3, s_53))) goto lab2;
            }
        lab3:
            c = c_test3;
        }
        I_pos = (len_utf8(p) - 3);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) goto lab2;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        goto lab0;
    lab2:
        c = c1;
        if (!(len_utf8(p) > 3)) goto lab11;
        {   int c_test5 = c;
            I_pos = (len_utf8(p) - 2);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) goto lab11;
                c = ret;
            }
            {   int c6 = c;
                if (!(eq_s(3, s_54))) goto lab13;
                goto lab12;
            lab13:
                c = c6;
                if (!(eq_s(3, s_55))) goto lab14;
                goto lab12;
            lab14:
                c = c6;
                if (!(eq_s(2, s_56))) goto lab15;
                goto lab12;
            lab15:
                c = c6;
                if (!(eq_s(2, s_57))) goto lab16;
                goto lab12;
            lab16:
                c = c6;
                if (!(eq_s(3, s_58))) goto lab17;
                goto lab12;
            lab17:
                c = c6;
                if (!(eq_s(3, s_59))) goto lab18;
                goto lab12;
            lab18:
                c = c6;
                if (!(eq_s(3, s_60))) goto lab19;
                goto lab12;
            lab19:
                c = c6;
                if (!(eq_s(3, s_61))) goto lab11;
            }
        lab12:
            c = c_test5;
        }
        I_pos = (len_utf8(p) - 2);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) goto lab11;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        goto lab0;
    lab11:
        c = c1;
        if (!(len_utf8(p) > 3)) return 0;
        {   int c_test7 = c;
            I_pos = (len_utf8(p) - 2);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) return 0;
                c = ret;
            }
            if (!(eq_s(2, s_62))) return 0;
            c = c_test7;
        }
        I_pos = (len_utf8(p) - 1);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) return 0;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
    }
lab0:
    return 1;
}

int Xapian::InternalStemPolish::r_remove_adverbs_ends() {
    {   int c1 = c;
        if (!(len_utf8(p) > 4)) goto lab1;
        {   int c_test2 = c;
            I_pos = (len_utf8(p) - 3);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) goto lab1;
                c = ret;
            }
            {   int c3 = c;
                if (!(eq_s(3, s_63))) goto lab3;
                goto lab2;
            lab3:
                c = c3;
                if (!(eq_s(3, s_64))) goto lab1;
            }
        lab2:
            c = c_test2;
        }
        I_pos = (len_utf8(p) - 2);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) goto lab1;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        goto lab0;
    lab1:
        c = c1;
        if (!(len_utf8(p) > 4)) return 0;
        {   int c_test4 = c;
            I_pos = (len_utf8(p) - 2);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) return 0;
                c = ret;
            }
            if (!(eq_s(3, s_65))) return 0;
            c = c_test4;
        }
        I_pos = (len_utf8(p) - 2);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) return 0;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
    }
lab0:
    return 1;
}

int Xapian::InternalStemPolish::r_remove_plural_forms() {
    {   int c1 = c;
        if (!(len_utf8(p) > 4)) goto lab1;
        {   int c_test2 = c;
            I_pos = (len_utf8(p) - 2);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) goto lab1;
                c = ret;
            }
            {   int c3 = c;
                if (!(eq_s(3, s_66))) goto lab3;
                goto lab2;
            lab3:
                c = c3;
                if (!(eq_s(2, s_67))) goto lab1;
            }
        lab2:
            c = c_test2;
        }
        I_pos = (len_utf8(p) - 2);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) goto lab1;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        goto lab0;
    lab1:
        c = c1;
        if (!(len_utf8(p) > 4)) return 0;
        {   int c_test4 = c;
            I_pos = (len_utf8(p) - 3);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) return 0;
                c = ret;
            }
            if (!(eq_s(3, s_68))) return 0;
            c = c_test4;
        }
        I_pos = (len_utf8(p) - 3);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) return 0;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
    }
lab0:
    return 1;
}

int Xapian::InternalStemPolish::r_remove_general_ends() {
    {   int c1 = c;
        if (!(len_utf8(p) > 4)) goto lab1;
        {   int c_test2 = c;
            I_pos = (len_utf8(p) - 2);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) goto lab1;
                c = ret;
            }
            {   int c3 = c;
                if (!(eq_s(2, s_69))) goto lab3;
                goto lab2;
            lab3:
                c = c3;
                if (!(eq_s(2, s_70))) goto lab1;
            }
        lab2:
            c = c_test2;
        }
        I_pos = (len_utf8(p) - 2);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) goto lab1;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
        goto lab0;
    lab1:
        c = c1;
        if (!(len_utf8(p) > 4)) return 0;
        {   int c_test4 = c;
            I_pos = (len_utf8(p) - 1);
            {   int ret = skip_utf8(p, c, 0, l, + I_pos);
                if (ret < 0) return 0;
                c = ret;
            }
            {   int c5 = c;
                if (c == l || p[c] != 'u') goto lab5;
                c++;
                goto lab4;
            lab5:
                c = c5;
                if (!(eq_s(2, s_71))) goto lab6;
                goto lab4;
            lab6:
                c = c5;
                if (c == l || p[c] != 'i') goto lab7;
                c++;
                goto lab4;
            lab7:
                c = c5;
                if (c == l || p[c] != 'a') goto lab8;
                c++;
                goto lab4;
            lab8:
                c = c5;
                if (!(eq_s(2, s_72))) goto lab9;
                goto lab4;
            lab9:
                c = c5;
                if (c == l || p[c] != 'y') goto lab10;
                c++;
                goto lab4;
            lab10:
                c = c5;
                if (!(eq_s(2, s_73))) return 0;
            }
        lab4:
            c = c_test4;
        }
        I_pos = (len_utf8(p) - 1);
        {   int ret = skip_utf8(p, c, 0, l, + I_pos);
            if (ret < 0) return 0;
            c = ret;
        }
        bra = c;
        c = l;
        ket = c;
        {   int ret = slice_del();
            if (ret < 0) return ret;
        }
    }
lab0:
    return 1;
}

int Xapian::InternalStemPolish::stem() {
    {   int c1 = c;
        {   int ret = r_remove_nouns();
            if (ret < 0) return ret;
        }
        c = c1;
    }
    {   int c2 = c;
        {   int ret = r_remove_dimunitive();
            if (ret < 0) return ret;
        }
        c = c2;
    }
    {   int c3 = c;
        {   int ret = r_remove_adjective_ends();
            if (ret < 0) return ret;
        }
        c = c3;
    }
    {   int c4 = c;
        {   int ret = r_remove_verbs_ends();
            if (ret < 0) return ret;
        }
        c = c4;
    }
    {   int c5 = c;
        {   int ret = r_remove_adverbs_ends();
            if (ret < 0) return ret;
        }
        c = c5;
    }
    {   int c6 = c;
        {   int ret = r_remove_plural_forms();
            if (ret < 0) return ret;
        }
        c = c6;
    }
    {   int c7 = c;
        {   int ret = r_remove_general_ends();
            if (ret < 0) return ret;
        }
        c = c7;
    }
    return 1;
}

Xapian::InternalStemPolish::InternalStemPolish()
    : I_pos(0)
{
}

Xapian::InternalStemPolish::~InternalStemPolish()
{
}

std::string
Xapian::InternalStemPolish::get_description() const
{
    return "polish";
}
